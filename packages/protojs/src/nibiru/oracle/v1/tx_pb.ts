// @generated by protoc-gen-es v1.2.1 with parameter "target=ts"
// @generated from file nibiru/oracle/v1/tx.proto (package nibiru.oracle.v1, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type {
  BinaryReadOptions,
  FieldList,
  JsonReadOptions,
  JsonValue,
  PartialMessage,
  PlainMessage,
} from "@bufbuild/protobuf"
import { Message, proto3 } from "@bufbuild/protobuf"

/**
 * MsgAggregateExchangeRatePrevote represents a message to submit
 * aggregate exchange rate prevote.
 *
 * @generated from message nibiru.oracle.v1.MsgAggregateExchangeRatePrevote
 */
export class MsgAggregateExchangeRatePrevote extends Message<MsgAggregateExchangeRatePrevote> {
  /**
   * @generated from field: string hash = 1;
   */
  hash = ""

  /**
   * Feeder is the Bech32 address of the price feeder. A validator may
   * specify multiple price feeders by delegating them consent. The validator
   * address is also a valid feeder by default.
   *
   * @generated from field: string feeder = 2;
   */
  feeder = ""

  /**
   * Validator is the Bech32 address to which the prevote will be credited.
   *
   * @generated from field: string validator = 3;
   */
  validator = ""

  constructor(data?: PartialMessage<MsgAggregateExchangeRatePrevote>) {
    super()
    proto3.util.initPartial(data, this)
  }

  static readonly runtime: typeof proto3 = proto3
  static readonly typeName = "nibiru.oracle.v1.MsgAggregateExchangeRatePrevote"
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "hash", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "feeder", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "validator", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ])

  static fromBinary(
    bytes: Uint8Array,
    options?: Partial<BinaryReadOptions>,
  ): MsgAggregateExchangeRatePrevote {
    return new MsgAggregateExchangeRatePrevote().fromBinary(bytes, options)
  }

  static fromJson(
    jsonValue: JsonValue,
    options?: Partial<JsonReadOptions>,
  ): MsgAggregateExchangeRatePrevote {
    return new MsgAggregateExchangeRatePrevote().fromJson(jsonValue, options)
  }

  static fromJsonString(
    jsonString: string,
    options?: Partial<JsonReadOptions>,
  ): MsgAggregateExchangeRatePrevote {
    return new MsgAggregateExchangeRatePrevote().fromJsonString(jsonString, options)
  }

  static equals(
    a:
      | MsgAggregateExchangeRatePrevote
      | PlainMessage<MsgAggregateExchangeRatePrevote>
      | undefined,
    b:
      | MsgAggregateExchangeRatePrevote
      | PlainMessage<MsgAggregateExchangeRatePrevote>
      | undefined,
  ): boolean {
    return proto3.util.equals(MsgAggregateExchangeRatePrevote, a, b)
  }
}

/**
 * MsgAggregateExchangeRatePrevoteResponse defines the
 * Msg/AggregateExchangeRatePrevote response type.
 *
 * @generated from message nibiru.oracle.v1.MsgAggregateExchangeRatePrevoteResponse
 */
export class MsgAggregateExchangeRatePrevoteResponse extends Message<MsgAggregateExchangeRatePrevoteResponse> {
  constructor(data?: PartialMessage<MsgAggregateExchangeRatePrevoteResponse>) {
    super()
    proto3.util.initPartial(data, this)
  }

  static readonly runtime: typeof proto3 = proto3
  static readonly typeName = "nibiru.oracle.v1.MsgAggregateExchangeRatePrevoteResponse"
  static readonly fields: FieldList = proto3.util.newFieldList(() => [])

  static fromBinary(
    bytes: Uint8Array,
    options?: Partial<BinaryReadOptions>,
  ): MsgAggregateExchangeRatePrevoteResponse {
    return new MsgAggregateExchangeRatePrevoteResponse().fromBinary(bytes, options)
  }

  static fromJson(
    jsonValue: JsonValue,
    options?: Partial<JsonReadOptions>,
  ): MsgAggregateExchangeRatePrevoteResponse {
    return new MsgAggregateExchangeRatePrevoteResponse().fromJson(jsonValue, options)
  }

  static fromJsonString(
    jsonString: string,
    options?: Partial<JsonReadOptions>,
  ): MsgAggregateExchangeRatePrevoteResponse {
    return new MsgAggregateExchangeRatePrevoteResponse().fromJsonString(
      jsonString,
      options,
    )
  }

  static equals(
    a:
      | MsgAggregateExchangeRatePrevoteResponse
      | PlainMessage<MsgAggregateExchangeRatePrevoteResponse>
      | undefined,
    b:
      | MsgAggregateExchangeRatePrevoteResponse
      | PlainMessage<MsgAggregateExchangeRatePrevoteResponse>
      | undefined,
  ): boolean {
    return proto3.util.equals(MsgAggregateExchangeRatePrevoteResponse, a, b)
  }
}

/**
 * MsgAggregateExchangeRateVote represents a message to submit
 * aggregate exchange rate vote.
 *
 * @generated from message nibiru.oracle.v1.MsgAggregateExchangeRateVote
 */
export class MsgAggregateExchangeRateVote extends Message<MsgAggregateExchangeRateVote> {
  /**
   * @generated from field: string salt = 1;
   */
  salt = ""

  /**
   * @generated from field: string exchange_rates = 2;
   */
  exchangeRates = ""

  /**
   * Feeder is the Bech32 address of the price feeder. A validator may
   * specify multiple price feeders by delegating them consent. The validator
   * address is also a valid feeder by default.
   *
   * @generated from field: string feeder = 3;
   */
  feeder = ""

  /**
   * Validator is the Bech32 address to which the vote will be credited.
   *
   * @generated from field: string validator = 4;
   */
  validator = ""

  constructor(data?: PartialMessage<MsgAggregateExchangeRateVote>) {
    super()
    proto3.util.initPartial(data, this)
  }

  static readonly runtime: typeof proto3 = proto3
  static readonly typeName = "nibiru.oracle.v1.MsgAggregateExchangeRateVote"
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "salt", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "exchange_rates", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "feeder", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "validator", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ])

  static fromBinary(
    bytes: Uint8Array,
    options?: Partial<BinaryReadOptions>,
  ): MsgAggregateExchangeRateVote {
    return new MsgAggregateExchangeRateVote().fromBinary(bytes, options)
  }

  static fromJson(
    jsonValue: JsonValue,
    options?: Partial<JsonReadOptions>,
  ): MsgAggregateExchangeRateVote {
    return new MsgAggregateExchangeRateVote().fromJson(jsonValue, options)
  }

  static fromJsonString(
    jsonString: string,
    options?: Partial<JsonReadOptions>,
  ): MsgAggregateExchangeRateVote {
    return new MsgAggregateExchangeRateVote().fromJsonString(jsonString, options)
  }

  static equals(
    a:
      | MsgAggregateExchangeRateVote
      | PlainMessage<MsgAggregateExchangeRateVote>
      | undefined,
    b:
      | MsgAggregateExchangeRateVote
      | PlainMessage<MsgAggregateExchangeRateVote>
      | undefined,
  ): boolean {
    return proto3.util.equals(MsgAggregateExchangeRateVote, a, b)
  }
}

/**
 * MsgAggregateExchangeRateVoteResponse defines the
 * Msg/AggregateExchangeRateVote response type.
 *
 * @generated from message nibiru.oracle.v1.MsgAggregateExchangeRateVoteResponse
 */
export class MsgAggregateExchangeRateVoteResponse extends Message<MsgAggregateExchangeRateVoteResponse> {
  constructor(data?: PartialMessage<MsgAggregateExchangeRateVoteResponse>) {
    super()
    proto3.util.initPartial(data, this)
  }

  static readonly runtime: typeof proto3 = proto3
  static readonly typeName = "nibiru.oracle.v1.MsgAggregateExchangeRateVoteResponse"
  static readonly fields: FieldList = proto3.util.newFieldList(() => [])

  static fromBinary(
    bytes: Uint8Array,
    options?: Partial<BinaryReadOptions>,
  ): MsgAggregateExchangeRateVoteResponse {
    return new MsgAggregateExchangeRateVoteResponse().fromBinary(bytes, options)
  }

  static fromJson(
    jsonValue: JsonValue,
    options?: Partial<JsonReadOptions>,
  ): MsgAggregateExchangeRateVoteResponse {
    return new MsgAggregateExchangeRateVoteResponse().fromJson(jsonValue, options)
  }

  static fromJsonString(
    jsonString: string,
    options?: Partial<JsonReadOptions>,
  ): MsgAggregateExchangeRateVoteResponse {
    return new MsgAggregateExchangeRateVoteResponse().fromJsonString(
      jsonString,
      options,
    )
  }

  static equals(
    a:
      | MsgAggregateExchangeRateVoteResponse
      | PlainMessage<MsgAggregateExchangeRateVoteResponse>
      | undefined,
    b:
      | MsgAggregateExchangeRateVoteResponse
      | PlainMessage<MsgAggregateExchangeRateVoteResponse>
      | undefined,
  ): boolean {
    return proto3.util.equals(MsgAggregateExchangeRateVoteResponse, a, b)
  }
}

/**
 * MsgDelegateFeedConsent represents a message to delegate oracle voting rights
 * to another address.
 *
 * @generated from message nibiru.oracle.v1.MsgDelegateFeedConsent
 */
export class MsgDelegateFeedConsent extends Message<MsgDelegateFeedConsent> {
  /**
   * @generated from field: string operator = 1;
   */
  operator = ""

  /**
   * @generated from field: string delegate = 2;
   */
  delegate = ""

  constructor(data?: PartialMessage<MsgDelegateFeedConsent>) {
    super()
    proto3.util.initPartial(data, this)
  }

  static readonly runtime: typeof proto3 = proto3
  static readonly typeName = "nibiru.oracle.v1.MsgDelegateFeedConsent"
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "operator", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "delegate", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ])

  static fromBinary(
    bytes: Uint8Array,
    options?: Partial<BinaryReadOptions>,
  ): MsgDelegateFeedConsent {
    return new MsgDelegateFeedConsent().fromBinary(bytes, options)
  }

  static fromJson(
    jsonValue: JsonValue,
    options?: Partial<JsonReadOptions>,
  ): MsgDelegateFeedConsent {
    return new MsgDelegateFeedConsent().fromJson(jsonValue, options)
  }

  static fromJsonString(
    jsonString: string,
    options?: Partial<JsonReadOptions>,
  ): MsgDelegateFeedConsent {
    return new MsgDelegateFeedConsent().fromJsonString(jsonString, options)
  }

  static equals(
    a: MsgDelegateFeedConsent | PlainMessage<MsgDelegateFeedConsent> | undefined,
    b: MsgDelegateFeedConsent | PlainMessage<MsgDelegateFeedConsent> | undefined,
  ): boolean {
    return proto3.util.equals(MsgDelegateFeedConsent, a, b)
  }
}

/**
 * MsgDelegateFeedConsentResponse defines the Msg/DelegateFeedConsent response
 * type.
 *
 * @generated from message nibiru.oracle.v1.MsgDelegateFeedConsentResponse
 */
export class MsgDelegateFeedConsentResponse extends Message<MsgDelegateFeedConsentResponse> {
  constructor(data?: PartialMessage<MsgDelegateFeedConsentResponse>) {
    super()
    proto3.util.initPartial(data, this)
  }

  static readonly runtime: typeof proto3 = proto3
  static readonly typeName = "nibiru.oracle.v1.MsgDelegateFeedConsentResponse"
  static readonly fields: FieldList = proto3.util.newFieldList(() => [])

  static fromBinary(
    bytes: Uint8Array,
    options?: Partial<BinaryReadOptions>,
  ): MsgDelegateFeedConsentResponse {
    return new MsgDelegateFeedConsentResponse().fromBinary(bytes, options)
  }

  static fromJson(
    jsonValue: JsonValue,
    options?: Partial<JsonReadOptions>,
  ): MsgDelegateFeedConsentResponse {
    return new MsgDelegateFeedConsentResponse().fromJson(jsonValue, options)
  }

  static fromJsonString(
    jsonString: string,
    options?: Partial<JsonReadOptions>,
  ): MsgDelegateFeedConsentResponse {
    return new MsgDelegateFeedConsentResponse().fromJsonString(jsonString, options)
  }

  static equals(
    a:
      | MsgDelegateFeedConsentResponse
      | PlainMessage<MsgDelegateFeedConsentResponse>
      | undefined,
    b:
      | MsgDelegateFeedConsentResponse
      | PlainMessage<MsgDelegateFeedConsentResponse>
      | undefined,
  ): boolean {
    return proto3.util.equals(MsgDelegateFeedConsentResponse, a, b)
  }
}
