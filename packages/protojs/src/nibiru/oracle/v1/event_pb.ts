// @generated by protoc-gen-es v1.2.1 with parameter "target=ts"
// @generated from file nibiru/oracle/v1/event.proto (package nibiru.oracle.v1, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type {
  BinaryReadOptions,
  FieldList,
  JsonReadOptions,
  JsonValue,
  PartialMessage,
  PlainMessage,
} from "@bufbuild/protobuf"
import { Message, proto3, protoInt64 } from "@bufbuild/protobuf"

/**
 * Emitted when a price is posted
 *
 * @generated from message nibiru.oracle.v1.OraclePriceUpdate
 */
export class OraclePriceUpdate extends Message<OraclePriceUpdate> {
  /**
   * @generated from field: string pair = 1;
   */
  pair = ""

  /**
   * @generated from field: string price = 2;
   */
  price = ""

  /**
   * @generated from field: int64 timestamp_ms = 3;
   */
  timestampMs = protoInt64.zero

  constructor(data?: PartialMessage<OraclePriceUpdate>) {
    super()
    proto3.util.initPartial(data, this)
  }

  static readonly runtime: typeof proto3 = proto3
  static readonly typeName = "nibiru.oracle.v1.OraclePriceUpdate"
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "pair", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "price", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "timestamp_ms", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
  ])

  static fromBinary(
    bytes: Uint8Array,
    options?: Partial<BinaryReadOptions>,
  ): OraclePriceUpdate {
    return new OraclePriceUpdate().fromBinary(bytes, options)
  }

  static fromJson(
    jsonValue: JsonValue,
    options?: Partial<JsonReadOptions>,
  ): OraclePriceUpdate {
    return new OraclePriceUpdate().fromJson(jsonValue, options)
  }

  static fromJsonString(
    jsonString: string,
    options?: Partial<JsonReadOptions>,
  ): OraclePriceUpdate {
    return new OraclePriceUpdate().fromJsonString(jsonString, options)
  }

  static equals(
    a: OraclePriceUpdate | PlainMessage<OraclePriceUpdate> | undefined,
    b: OraclePriceUpdate | PlainMessage<OraclePriceUpdate> | undefined,
  ): boolean {
    return proto3.util.equals(OraclePriceUpdate, a, b)
  }
}
