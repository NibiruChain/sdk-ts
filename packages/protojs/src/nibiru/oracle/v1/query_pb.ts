// @generated by protoc-gen-es v1.2.1 with parameter "target=ts"
// @generated from file nibiru/oracle/v1/query.proto (package nibiru.oracle.v1, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type {
  BinaryReadOptions,
  FieldList,
  JsonReadOptions,
  JsonValue,
  PartialMessage,
  PlainMessage,
} from "@bufbuild/protobuf"
import { Message, proto3, protoInt64 } from "@bufbuild/protobuf"
import {
  AggregateExchangeRatePrevote,
  AggregateExchangeRateVote,
  ExchangeRateTuple,
  Params,
} from "./oracle_pb.js"

/**
 * QueryExchangeRateRequest is the request type for the Query/ExchangeRate RPC
 * method.
 *
 * @generated from message nibiru.oracle.v1.QueryExchangeRateRequest
 */
export class QueryExchangeRateRequest extends Message<QueryExchangeRateRequest> {
  /**
   * pair defines the pair to query for.
   *
   * @generated from field: string pair = 1;
   */
  pair = ""

  constructor(data?: PartialMessage<QueryExchangeRateRequest>) {
    super()
    proto3.util.initPartial(data, this)
  }

  static readonly runtime: typeof proto3 = proto3
  static readonly typeName = "nibiru.oracle.v1.QueryExchangeRateRequest"
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "pair", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ])

  static fromBinary(
    bytes: Uint8Array,
    options?: Partial<BinaryReadOptions>,
  ): QueryExchangeRateRequest {
    return new QueryExchangeRateRequest().fromBinary(bytes, options)
  }

  static fromJson(
    jsonValue: JsonValue,
    options?: Partial<JsonReadOptions>,
  ): QueryExchangeRateRequest {
    return new QueryExchangeRateRequest().fromJson(jsonValue, options)
  }

  static fromJsonString(
    jsonString: string,
    options?: Partial<JsonReadOptions>,
  ): QueryExchangeRateRequest {
    return new QueryExchangeRateRequest().fromJsonString(jsonString, options)
  }

  static equals(
    a: QueryExchangeRateRequest | PlainMessage<QueryExchangeRateRequest> | undefined,
    b: QueryExchangeRateRequest | PlainMessage<QueryExchangeRateRequest> | undefined,
  ): boolean {
    return proto3.util.equals(QueryExchangeRateRequest, a, b)
  }
}

/**
 * QueryExchangeRateResponse is response type for the
 * Query/ExchangeRate RPC method.
 *
 * @generated from message nibiru.oracle.v1.QueryExchangeRateResponse
 */
export class QueryExchangeRateResponse extends Message<QueryExchangeRateResponse> {
  /**
   * exchange_rate defines the exchange rate of assets voted by validators
   *
   * @generated from field: string exchange_rate = 1;
   */
  exchangeRate = ""

  constructor(data?: PartialMessage<QueryExchangeRateResponse>) {
    super()
    proto3.util.initPartial(data, this)
  }

  static readonly runtime: typeof proto3 = proto3
  static readonly typeName = "nibiru.oracle.v1.QueryExchangeRateResponse"
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "exchange_rate", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ])

  static fromBinary(
    bytes: Uint8Array,
    options?: Partial<BinaryReadOptions>,
  ): QueryExchangeRateResponse {
    return new QueryExchangeRateResponse().fromBinary(bytes, options)
  }

  static fromJson(
    jsonValue: JsonValue,
    options?: Partial<JsonReadOptions>,
  ): QueryExchangeRateResponse {
    return new QueryExchangeRateResponse().fromJson(jsonValue, options)
  }

  static fromJsonString(
    jsonString: string,
    options?: Partial<JsonReadOptions>,
  ): QueryExchangeRateResponse {
    return new QueryExchangeRateResponse().fromJsonString(jsonString, options)
  }

  static equals(
    a: QueryExchangeRateResponse | PlainMessage<QueryExchangeRateResponse> | undefined,
    b: QueryExchangeRateResponse | PlainMessage<QueryExchangeRateResponse> | undefined,
  ): boolean {
    return proto3.util.equals(QueryExchangeRateResponse, a, b)
  }
}

/**
 * QueryExchangeRatesRequest is the request type for the Query/ExchangeRates RPC
 * method.
 *
 * @generated from message nibiru.oracle.v1.QueryExchangeRatesRequest
 */
export class QueryExchangeRatesRequest extends Message<QueryExchangeRatesRequest> {
  constructor(data?: PartialMessage<QueryExchangeRatesRequest>) {
    super()
    proto3.util.initPartial(data, this)
  }

  static readonly runtime: typeof proto3 = proto3
  static readonly typeName = "nibiru.oracle.v1.QueryExchangeRatesRequest"
  static readonly fields: FieldList = proto3.util.newFieldList(() => [])

  static fromBinary(
    bytes: Uint8Array,
    options?: Partial<BinaryReadOptions>,
  ): QueryExchangeRatesRequest {
    return new QueryExchangeRatesRequest().fromBinary(bytes, options)
  }

  static fromJson(
    jsonValue: JsonValue,
    options?: Partial<JsonReadOptions>,
  ): QueryExchangeRatesRequest {
    return new QueryExchangeRatesRequest().fromJson(jsonValue, options)
  }

  static fromJsonString(
    jsonString: string,
    options?: Partial<JsonReadOptions>,
  ): QueryExchangeRatesRequest {
    return new QueryExchangeRatesRequest().fromJsonString(jsonString, options)
  }

  static equals(
    a: QueryExchangeRatesRequest | PlainMessage<QueryExchangeRatesRequest> | undefined,
    b: QueryExchangeRatesRequest | PlainMessage<QueryExchangeRatesRequest> | undefined,
  ): boolean {
    return proto3.util.equals(QueryExchangeRatesRequest, a, b)
  }
}

/**
 * QueryExchangeRatesResponse is response type for the
 * Query/ExchangeRates RPC method.
 *
 * @generated from message nibiru.oracle.v1.QueryExchangeRatesResponse
 */
export class QueryExchangeRatesResponse extends Message<QueryExchangeRatesResponse> {
  /**
   * exchange_rates defines a list of the exchange rate for all whitelisted
   * pairs.
   *
   * @generated from field: repeated nibiru.oracle.v1.ExchangeRateTuple exchange_rates = 1;
   */
  exchangeRates: ExchangeRateTuple[] = []

  constructor(data?: PartialMessage<QueryExchangeRatesResponse>) {
    super()
    proto3.util.initPartial(data, this)
  }

  static readonly runtime: typeof proto3 = proto3
  static readonly typeName = "nibiru.oracle.v1.QueryExchangeRatesResponse"
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    {
      no: 1,
      name: "exchange_rates",
      kind: "message",
      T: ExchangeRateTuple,
      repeated: true,
    },
  ])

  static fromBinary(
    bytes: Uint8Array,
    options?: Partial<BinaryReadOptions>,
  ): QueryExchangeRatesResponse {
    return new QueryExchangeRatesResponse().fromBinary(bytes, options)
  }

  static fromJson(
    jsonValue: JsonValue,
    options?: Partial<JsonReadOptions>,
  ): QueryExchangeRatesResponse {
    return new QueryExchangeRatesResponse().fromJson(jsonValue, options)
  }

  static fromJsonString(
    jsonString: string,
    options?: Partial<JsonReadOptions>,
  ): QueryExchangeRatesResponse {
    return new QueryExchangeRatesResponse().fromJsonString(jsonString, options)
  }

  static equals(
    a:
      | QueryExchangeRatesResponse
      | PlainMessage<QueryExchangeRatesResponse>
      | undefined,
    b:
      | QueryExchangeRatesResponse
      | PlainMessage<QueryExchangeRatesResponse>
      | undefined,
  ): boolean {
    return proto3.util.equals(QueryExchangeRatesResponse, a, b)
  }
}

/**
 * QueryActivesRequest is the request type for the Query/Actives RPC method.
 *
 * @generated from message nibiru.oracle.v1.QueryActivesRequest
 */
export class QueryActivesRequest extends Message<QueryActivesRequest> {
  constructor(data?: PartialMessage<QueryActivesRequest>) {
    super()
    proto3.util.initPartial(data, this)
  }

  static readonly runtime: typeof proto3 = proto3
  static readonly typeName = "nibiru.oracle.v1.QueryActivesRequest"
  static readonly fields: FieldList = proto3.util.newFieldList(() => [])

  static fromBinary(
    bytes: Uint8Array,
    options?: Partial<BinaryReadOptions>,
  ): QueryActivesRequest {
    return new QueryActivesRequest().fromBinary(bytes, options)
  }

  static fromJson(
    jsonValue: JsonValue,
    options?: Partial<JsonReadOptions>,
  ): QueryActivesRequest {
    return new QueryActivesRequest().fromJson(jsonValue, options)
  }

  static fromJsonString(
    jsonString: string,
    options?: Partial<JsonReadOptions>,
  ): QueryActivesRequest {
    return new QueryActivesRequest().fromJsonString(jsonString, options)
  }

  static equals(
    a: QueryActivesRequest | PlainMessage<QueryActivesRequest> | undefined,
    b: QueryActivesRequest | PlainMessage<QueryActivesRequest> | undefined,
  ): boolean {
    return proto3.util.equals(QueryActivesRequest, a, b)
  }
}

/**
 * QueryActivesResponse is response type for the
 * Query/Actives RPC method.
 *
 * @generated from message nibiru.oracle.v1.QueryActivesResponse
 */
export class QueryActivesResponse extends Message<QueryActivesResponse> {
  /**
   * actives defines a list of the pair which oracle prices agreed upon.
   *
   * @generated from field: repeated string actives = 1;
   */
  actives: string[] = []

  constructor(data?: PartialMessage<QueryActivesResponse>) {
    super()
    proto3.util.initPartial(data, this)
  }

  static readonly runtime: typeof proto3 = proto3
  static readonly typeName = "nibiru.oracle.v1.QueryActivesResponse"
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    {
      no: 1,
      name: "actives",
      kind: "scalar",
      T: 9 /* ScalarType.STRING */,
      repeated: true,
    },
  ])

  static fromBinary(
    bytes: Uint8Array,
    options?: Partial<BinaryReadOptions>,
  ): QueryActivesResponse {
    return new QueryActivesResponse().fromBinary(bytes, options)
  }

  static fromJson(
    jsonValue: JsonValue,
    options?: Partial<JsonReadOptions>,
  ): QueryActivesResponse {
    return new QueryActivesResponse().fromJson(jsonValue, options)
  }

  static fromJsonString(
    jsonString: string,
    options?: Partial<JsonReadOptions>,
  ): QueryActivesResponse {
    return new QueryActivesResponse().fromJsonString(jsonString, options)
  }

  static equals(
    a: QueryActivesResponse | PlainMessage<QueryActivesResponse> | undefined,
    b: QueryActivesResponse | PlainMessage<QueryActivesResponse> | undefined,
  ): boolean {
    return proto3.util.equals(QueryActivesResponse, a, b)
  }
}

/**
 * QueryVoteTargetsRequest is the request type for the Query/VoteTargets RPC
 * method.
 *
 * @generated from message nibiru.oracle.v1.QueryVoteTargetsRequest
 */
export class QueryVoteTargetsRequest extends Message<QueryVoteTargetsRequest> {
  constructor(data?: PartialMessage<QueryVoteTargetsRequest>) {
    super()
    proto3.util.initPartial(data, this)
  }

  static readonly runtime: typeof proto3 = proto3
  static readonly typeName = "nibiru.oracle.v1.QueryVoteTargetsRequest"
  static readonly fields: FieldList = proto3.util.newFieldList(() => [])

  static fromBinary(
    bytes: Uint8Array,
    options?: Partial<BinaryReadOptions>,
  ): QueryVoteTargetsRequest {
    return new QueryVoteTargetsRequest().fromBinary(bytes, options)
  }

  static fromJson(
    jsonValue: JsonValue,
    options?: Partial<JsonReadOptions>,
  ): QueryVoteTargetsRequest {
    return new QueryVoteTargetsRequest().fromJson(jsonValue, options)
  }

  static fromJsonString(
    jsonString: string,
    options?: Partial<JsonReadOptions>,
  ): QueryVoteTargetsRequest {
    return new QueryVoteTargetsRequest().fromJsonString(jsonString, options)
  }

  static equals(
    a: QueryVoteTargetsRequest | PlainMessage<QueryVoteTargetsRequest> | undefined,
    b: QueryVoteTargetsRequest | PlainMessage<QueryVoteTargetsRequest> | undefined,
  ): boolean {
    return proto3.util.equals(QueryVoteTargetsRequest, a, b)
  }
}

/**
 * QueryVoteTargetsResponse is response type for the
 * Query/VoteTargets RPC method.
 *
 * @generated from message nibiru.oracle.v1.QueryVoteTargetsResponse
 */
export class QueryVoteTargetsResponse extends Message<QueryVoteTargetsResponse> {
  /**
   * vote_targets defines a list of the pairs in which everyone
   * should vote in the current vote period.
   *
   * @generated from field: repeated string vote_targets = 1;
   */
  voteTargets: string[] = []

  constructor(data?: PartialMessage<QueryVoteTargetsResponse>) {
    super()
    proto3.util.initPartial(data, this)
  }

  static readonly runtime: typeof proto3 = proto3
  static readonly typeName = "nibiru.oracle.v1.QueryVoteTargetsResponse"
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    {
      no: 1,
      name: "vote_targets",
      kind: "scalar",
      T: 9 /* ScalarType.STRING */,
      repeated: true,
    },
  ])

  static fromBinary(
    bytes: Uint8Array,
    options?: Partial<BinaryReadOptions>,
  ): QueryVoteTargetsResponse {
    return new QueryVoteTargetsResponse().fromBinary(bytes, options)
  }

  static fromJson(
    jsonValue: JsonValue,
    options?: Partial<JsonReadOptions>,
  ): QueryVoteTargetsResponse {
    return new QueryVoteTargetsResponse().fromJson(jsonValue, options)
  }

  static fromJsonString(
    jsonString: string,
    options?: Partial<JsonReadOptions>,
  ): QueryVoteTargetsResponse {
    return new QueryVoteTargetsResponse().fromJsonString(jsonString, options)
  }

  static equals(
    a: QueryVoteTargetsResponse | PlainMessage<QueryVoteTargetsResponse> | undefined,
    b: QueryVoteTargetsResponse | PlainMessage<QueryVoteTargetsResponse> | undefined,
  ): boolean {
    return proto3.util.equals(QueryVoteTargetsResponse, a, b)
  }
}

/**
 * QueryFeederDelegationRequest is the request type for the
 * Query/FeederDelegation RPC method.
 *
 * @generated from message nibiru.oracle.v1.QueryFeederDelegationRequest
 */
export class QueryFeederDelegationRequest extends Message<QueryFeederDelegationRequest> {
  /**
   * validator defines the validator address to query for.
   *
   * @generated from field: string validator_addr = 1;
   */
  validatorAddr = ""

  constructor(data?: PartialMessage<QueryFeederDelegationRequest>) {
    super()
    proto3.util.initPartial(data, this)
  }

  static readonly runtime: typeof proto3 = proto3
  static readonly typeName = "nibiru.oracle.v1.QueryFeederDelegationRequest"
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "validator_addr", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ])

  static fromBinary(
    bytes: Uint8Array,
    options?: Partial<BinaryReadOptions>,
  ): QueryFeederDelegationRequest {
    return new QueryFeederDelegationRequest().fromBinary(bytes, options)
  }

  static fromJson(
    jsonValue: JsonValue,
    options?: Partial<JsonReadOptions>,
  ): QueryFeederDelegationRequest {
    return new QueryFeederDelegationRequest().fromJson(jsonValue, options)
  }

  static fromJsonString(
    jsonString: string,
    options?: Partial<JsonReadOptions>,
  ): QueryFeederDelegationRequest {
    return new QueryFeederDelegationRequest().fromJsonString(jsonString, options)
  }

  static equals(
    a:
      | QueryFeederDelegationRequest
      | PlainMessage<QueryFeederDelegationRequest>
      | undefined,
    b:
      | QueryFeederDelegationRequest
      | PlainMessage<QueryFeederDelegationRequest>
      | undefined,
  ): boolean {
    return proto3.util.equals(QueryFeederDelegationRequest, a, b)
  }
}

/**
 * QueryFeederDelegationResponse is response type for the
 * Query/FeederDelegation RPC method.
 *
 * @generated from message nibiru.oracle.v1.QueryFeederDelegationResponse
 */
export class QueryFeederDelegationResponse extends Message<QueryFeederDelegationResponse> {
  /**
   * feeder_addr defines the feeder delegation of a validator
   *
   * @generated from field: string feeder_addr = 1;
   */
  feederAddr = ""

  constructor(data?: PartialMessage<QueryFeederDelegationResponse>) {
    super()
    proto3.util.initPartial(data, this)
  }

  static readonly runtime: typeof proto3 = proto3
  static readonly typeName = "nibiru.oracle.v1.QueryFeederDelegationResponse"
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "feeder_addr", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ])

  static fromBinary(
    bytes: Uint8Array,
    options?: Partial<BinaryReadOptions>,
  ): QueryFeederDelegationResponse {
    return new QueryFeederDelegationResponse().fromBinary(bytes, options)
  }

  static fromJson(
    jsonValue: JsonValue,
    options?: Partial<JsonReadOptions>,
  ): QueryFeederDelegationResponse {
    return new QueryFeederDelegationResponse().fromJson(jsonValue, options)
  }

  static fromJsonString(
    jsonString: string,
    options?: Partial<JsonReadOptions>,
  ): QueryFeederDelegationResponse {
    return new QueryFeederDelegationResponse().fromJsonString(jsonString, options)
  }

  static equals(
    a:
      | QueryFeederDelegationResponse
      | PlainMessage<QueryFeederDelegationResponse>
      | undefined,
    b:
      | QueryFeederDelegationResponse
      | PlainMessage<QueryFeederDelegationResponse>
      | undefined,
  ): boolean {
    return proto3.util.equals(QueryFeederDelegationResponse, a, b)
  }
}

/**
 * QueryMissCounterRequest is the request type for the Query/MissCounter RPC
 * method.
 *
 * @generated from message nibiru.oracle.v1.QueryMissCounterRequest
 */
export class QueryMissCounterRequest extends Message<QueryMissCounterRequest> {
  /**
   * validator defines the validator address to query for.
   *
   * @generated from field: string validator_addr = 1;
   */
  validatorAddr = ""

  constructor(data?: PartialMessage<QueryMissCounterRequest>) {
    super()
    proto3.util.initPartial(data, this)
  }

  static readonly runtime: typeof proto3 = proto3
  static readonly typeName = "nibiru.oracle.v1.QueryMissCounterRequest"
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "validator_addr", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ])

  static fromBinary(
    bytes: Uint8Array,
    options?: Partial<BinaryReadOptions>,
  ): QueryMissCounterRequest {
    return new QueryMissCounterRequest().fromBinary(bytes, options)
  }

  static fromJson(
    jsonValue: JsonValue,
    options?: Partial<JsonReadOptions>,
  ): QueryMissCounterRequest {
    return new QueryMissCounterRequest().fromJson(jsonValue, options)
  }

  static fromJsonString(
    jsonString: string,
    options?: Partial<JsonReadOptions>,
  ): QueryMissCounterRequest {
    return new QueryMissCounterRequest().fromJsonString(jsonString, options)
  }

  static equals(
    a: QueryMissCounterRequest | PlainMessage<QueryMissCounterRequest> | undefined,
    b: QueryMissCounterRequest | PlainMessage<QueryMissCounterRequest> | undefined,
  ): boolean {
    return proto3.util.equals(QueryMissCounterRequest, a, b)
  }
}

/**
 * QueryMissCounterResponse is response type for the
 * Query/MissCounter RPC method.
 *
 * @generated from message nibiru.oracle.v1.QueryMissCounterResponse
 */
export class QueryMissCounterResponse extends Message<QueryMissCounterResponse> {
  /**
   * miss_counter defines the oracle miss counter of a validator
   *
   * @generated from field: uint64 miss_counter = 1;
   */
  missCounter = protoInt64.zero

  constructor(data?: PartialMessage<QueryMissCounterResponse>) {
    super()
    proto3.util.initPartial(data, this)
  }

  static readonly runtime: typeof proto3 = proto3
  static readonly typeName = "nibiru.oracle.v1.QueryMissCounterResponse"
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "miss_counter", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
  ])

  static fromBinary(
    bytes: Uint8Array,
    options?: Partial<BinaryReadOptions>,
  ): QueryMissCounterResponse {
    return new QueryMissCounterResponse().fromBinary(bytes, options)
  }

  static fromJson(
    jsonValue: JsonValue,
    options?: Partial<JsonReadOptions>,
  ): QueryMissCounterResponse {
    return new QueryMissCounterResponse().fromJson(jsonValue, options)
  }

  static fromJsonString(
    jsonString: string,
    options?: Partial<JsonReadOptions>,
  ): QueryMissCounterResponse {
    return new QueryMissCounterResponse().fromJsonString(jsonString, options)
  }

  static equals(
    a: QueryMissCounterResponse | PlainMessage<QueryMissCounterResponse> | undefined,
    b: QueryMissCounterResponse | PlainMessage<QueryMissCounterResponse> | undefined,
  ): boolean {
    return proto3.util.equals(QueryMissCounterResponse, a, b)
  }
}

/**
 * QueryAggregatePrevoteRequest is the request type for the
 * Query/AggregatePrevote RPC method.
 *
 * @generated from message nibiru.oracle.v1.QueryAggregatePrevoteRequest
 */
export class QueryAggregatePrevoteRequest extends Message<QueryAggregatePrevoteRequest> {
  /**
   * validator defines the validator address to query for.
   *
   * @generated from field: string validator_addr = 1;
   */
  validatorAddr = ""

  constructor(data?: PartialMessage<QueryAggregatePrevoteRequest>) {
    super()
    proto3.util.initPartial(data, this)
  }

  static readonly runtime: typeof proto3 = proto3
  static readonly typeName = "nibiru.oracle.v1.QueryAggregatePrevoteRequest"
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "validator_addr", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ])

  static fromBinary(
    bytes: Uint8Array,
    options?: Partial<BinaryReadOptions>,
  ): QueryAggregatePrevoteRequest {
    return new QueryAggregatePrevoteRequest().fromBinary(bytes, options)
  }

  static fromJson(
    jsonValue: JsonValue,
    options?: Partial<JsonReadOptions>,
  ): QueryAggregatePrevoteRequest {
    return new QueryAggregatePrevoteRequest().fromJson(jsonValue, options)
  }

  static fromJsonString(
    jsonString: string,
    options?: Partial<JsonReadOptions>,
  ): QueryAggregatePrevoteRequest {
    return new QueryAggregatePrevoteRequest().fromJsonString(jsonString, options)
  }

  static equals(
    a:
      | QueryAggregatePrevoteRequest
      | PlainMessage<QueryAggregatePrevoteRequest>
      | undefined,
    b:
      | QueryAggregatePrevoteRequest
      | PlainMessage<QueryAggregatePrevoteRequest>
      | undefined,
  ): boolean {
    return proto3.util.equals(QueryAggregatePrevoteRequest, a, b)
  }
}

/**
 * QueryAggregatePrevoteResponse is response type for the
 * Query/AggregatePrevote RPC method.
 *
 * @generated from message nibiru.oracle.v1.QueryAggregatePrevoteResponse
 */
export class QueryAggregatePrevoteResponse extends Message<QueryAggregatePrevoteResponse> {
  /**
   * aggregate_prevote defines oracle aggregate prevote submitted by a validator
   * in the current vote period
   *
   * @generated from field: nibiru.oracle.v1.AggregateExchangeRatePrevote aggregate_prevote = 1;
   */
  aggregatePrevote?: AggregateExchangeRatePrevote

  constructor(data?: PartialMessage<QueryAggregatePrevoteResponse>) {
    super()
    proto3.util.initPartial(data, this)
  }

  static readonly runtime: typeof proto3 = proto3
  static readonly typeName = "nibiru.oracle.v1.QueryAggregatePrevoteResponse"
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    {
      no: 1,
      name: "aggregate_prevote",
      kind: "message",
      T: AggregateExchangeRatePrevote,
    },
  ])

  static fromBinary(
    bytes: Uint8Array,
    options?: Partial<BinaryReadOptions>,
  ): QueryAggregatePrevoteResponse {
    return new QueryAggregatePrevoteResponse().fromBinary(bytes, options)
  }

  static fromJson(
    jsonValue: JsonValue,
    options?: Partial<JsonReadOptions>,
  ): QueryAggregatePrevoteResponse {
    return new QueryAggregatePrevoteResponse().fromJson(jsonValue, options)
  }

  static fromJsonString(
    jsonString: string,
    options?: Partial<JsonReadOptions>,
  ): QueryAggregatePrevoteResponse {
    return new QueryAggregatePrevoteResponse().fromJsonString(jsonString, options)
  }

  static equals(
    a:
      | QueryAggregatePrevoteResponse
      | PlainMessage<QueryAggregatePrevoteResponse>
      | undefined,
    b:
      | QueryAggregatePrevoteResponse
      | PlainMessage<QueryAggregatePrevoteResponse>
      | undefined,
  ): boolean {
    return proto3.util.equals(QueryAggregatePrevoteResponse, a, b)
  }
}

/**
 * QueryAggregatePrevotesRequest is the request type for the
 * Query/AggregatePrevotes RPC method.
 *
 * @generated from message nibiru.oracle.v1.QueryAggregatePrevotesRequest
 */
export class QueryAggregatePrevotesRequest extends Message<QueryAggregatePrevotesRequest> {
  constructor(data?: PartialMessage<QueryAggregatePrevotesRequest>) {
    super()
    proto3.util.initPartial(data, this)
  }

  static readonly runtime: typeof proto3 = proto3
  static readonly typeName = "nibiru.oracle.v1.QueryAggregatePrevotesRequest"
  static readonly fields: FieldList = proto3.util.newFieldList(() => [])

  static fromBinary(
    bytes: Uint8Array,
    options?: Partial<BinaryReadOptions>,
  ): QueryAggregatePrevotesRequest {
    return new QueryAggregatePrevotesRequest().fromBinary(bytes, options)
  }

  static fromJson(
    jsonValue: JsonValue,
    options?: Partial<JsonReadOptions>,
  ): QueryAggregatePrevotesRequest {
    return new QueryAggregatePrevotesRequest().fromJson(jsonValue, options)
  }

  static fromJsonString(
    jsonString: string,
    options?: Partial<JsonReadOptions>,
  ): QueryAggregatePrevotesRequest {
    return new QueryAggregatePrevotesRequest().fromJsonString(jsonString, options)
  }

  static equals(
    a:
      | QueryAggregatePrevotesRequest
      | PlainMessage<QueryAggregatePrevotesRequest>
      | undefined,
    b:
      | QueryAggregatePrevotesRequest
      | PlainMessage<QueryAggregatePrevotesRequest>
      | undefined,
  ): boolean {
    return proto3.util.equals(QueryAggregatePrevotesRequest, a, b)
  }
}

/**
 * QueryAggregatePrevotesResponse is response type for the
 * Query/AggregatePrevotes RPC method.
 *
 * @generated from message nibiru.oracle.v1.QueryAggregatePrevotesResponse
 */
export class QueryAggregatePrevotesResponse extends Message<QueryAggregatePrevotesResponse> {
  /**
   * aggregate_prevotes defines all oracle aggregate prevotes submitted in the
   * current vote period
   *
   * @generated from field: repeated nibiru.oracle.v1.AggregateExchangeRatePrevote aggregate_prevotes = 1;
   */
  aggregatePrevotes: AggregateExchangeRatePrevote[] = []

  constructor(data?: PartialMessage<QueryAggregatePrevotesResponse>) {
    super()
    proto3.util.initPartial(data, this)
  }

  static readonly runtime: typeof proto3 = proto3
  static readonly typeName = "nibiru.oracle.v1.QueryAggregatePrevotesResponse"
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    {
      no: 1,
      name: "aggregate_prevotes",
      kind: "message",
      T: AggregateExchangeRatePrevote,
      repeated: true,
    },
  ])

  static fromBinary(
    bytes: Uint8Array,
    options?: Partial<BinaryReadOptions>,
  ): QueryAggregatePrevotesResponse {
    return new QueryAggregatePrevotesResponse().fromBinary(bytes, options)
  }

  static fromJson(
    jsonValue: JsonValue,
    options?: Partial<JsonReadOptions>,
  ): QueryAggregatePrevotesResponse {
    return new QueryAggregatePrevotesResponse().fromJson(jsonValue, options)
  }

  static fromJsonString(
    jsonString: string,
    options?: Partial<JsonReadOptions>,
  ): QueryAggregatePrevotesResponse {
    return new QueryAggregatePrevotesResponse().fromJsonString(jsonString, options)
  }

  static equals(
    a:
      | QueryAggregatePrevotesResponse
      | PlainMessage<QueryAggregatePrevotesResponse>
      | undefined,
    b:
      | QueryAggregatePrevotesResponse
      | PlainMessage<QueryAggregatePrevotesResponse>
      | undefined,
  ): boolean {
    return proto3.util.equals(QueryAggregatePrevotesResponse, a, b)
  }
}

/**
 * QueryAggregateVoteRequest is the request type for the Query/AggregateVote RPC
 * method.
 *
 * @generated from message nibiru.oracle.v1.QueryAggregateVoteRequest
 */
export class QueryAggregateVoteRequest extends Message<QueryAggregateVoteRequest> {
  /**
   * validator defines the validator address to query for.
   *
   * @generated from field: string validator_addr = 1;
   */
  validatorAddr = ""

  constructor(data?: PartialMessage<QueryAggregateVoteRequest>) {
    super()
    proto3.util.initPartial(data, this)
  }

  static readonly runtime: typeof proto3 = proto3
  static readonly typeName = "nibiru.oracle.v1.QueryAggregateVoteRequest"
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "validator_addr", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ])

  static fromBinary(
    bytes: Uint8Array,
    options?: Partial<BinaryReadOptions>,
  ): QueryAggregateVoteRequest {
    return new QueryAggregateVoteRequest().fromBinary(bytes, options)
  }

  static fromJson(
    jsonValue: JsonValue,
    options?: Partial<JsonReadOptions>,
  ): QueryAggregateVoteRequest {
    return new QueryAggregateVoteRequest().fromJson(jsonValue, options)
  }

  static fromJsonString(
    jsonString: string,
    options?: Partial<JsonReadOptions>,
  ): QueryAggregateVoteRequest {
    return new QueryAggregateVoteRequest().fromJsonString(jsonString, options)
  }

  static equals(
    a: QueryAggregateVoteRequest | PlainMessage<QueryAggregateVoteRequest> | undefined,
    b: QueryAggregateVoteRequest | PlainMessage<QueryAggregateVoteRequest> | undefined,
  ): boolean {
    return proto3.util.equals(QueryAggregateVoteRequest, a, b)
  }
}

/**
 * QueryAggregateVoteResponse is response type for the
 * Query/AggregateVote RPC method.
 *
 * @generated from message nibiru.oracle.v1.QueryAggregateVoteResponse
 */
export class QueryAggregateVoteResponse extends Message<QueryAggregateVoteResponse> {
  /**
   * aggregate_vote defines oracle aggregate vote submitted by a validator in
   * the current vote period
   *
   * @generated from field: nibiru.oracle.v1.AggregateExchangeRateVote aggregate_vote = 1;
   */
  aggregateVote?: AggregateExchangeRateVote

  constructor(data?: PartialMessage<QueryAggregateVoteResponse>) {
    super()
    proto3.util.initPartial(data, this)
  }

  static readonly runtime: typeof proto3 = proto3
  static readonly typeName = "nibiru.oracle.v1.QueryAggregateVoteResponse"
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "aggregate_vote", kind: "message", T: AggregateExchangeRateVote },
  ])

  static fromBinary(
    bytes: Uint8Array,
    options?: Partial<BinaryReadOptions>,
  ): QueryAggregateVoteResponse {
    return new QueryAggregateVoteResponse().fromBinary(bytes, options)
  }

  static fromJson(
    jsonValue: JsonValue,
    options?: Partial<JsonReadOptions>,
  ): QueryAggregateVoteResponse {
    return new QueryAggregateVoteResponse().fromJson(jsonValue, options)
  }

  static fromJsonString(
    jsonString: string,
    options?: Partial<JsonReadOptions>,
  ): QueryAggregateVoteResponse {
    return new QueryAggregateVoteResponse().fromJsonString(jsonString, options)
  }

  static equals(
    a:
      | QueryAggregateVoteResponse
      | PlainMessage<QueryAggregateVoteResponse>
      | undefined,
    b:
      | QueryAggregateVoteResponse
      | PlainMessage<QueryAggregateVoteResponse>
      | undefined,
  ): boolean {
    return proto3.util.equals(QueryAggregateVoteResponse, a, b)
  }
}

/**
 * QueryAggregateVotesRequest is the request type for the Query/AggregateVotes
 * RPC method.
 *
 * @generated from message nibiru.oracle.v1.QueryAggregateVotesRequest
 */
export class QueryAggregateVotesRequest extends Message<QueryAggregateVotesRequest> {
  constructor(data?: PartialMessage<QueryAggregateVotesRequest>) {
    super()
    proto3.util.initPartial(data, this)
  }

  static readonly runtime: typeof proto3 = proto3
  static readonly typeName = "nibiru.oracle.v1.QueryAggregateVotesRequest"
  static readonly fields: FieldList = proto3.util.newFieldList(() => [])

  static fromBinary(
    bytes: Uint8Array,
    options?: Partial<BinaryReadOptions>,
  ): QueryAggregateVotesRequest {
    return new QueryAggregateVotesRequest().fromBinary(bytes, options)
  }

  static fromJson(
    jsonValue: JsonValue,
    options?: Partial<JsonReadOptions>,
  ): QueryAggregateVotesRequest {
    return new QueryAggregateVotesRequest().fromJson(jsonValue, options)
  }

  static fromJsonString(
    jsonString: string,
    options?: Partial<JsonReadOptions>,
  ): QueryAggregateVotesRequest {
    return new QueryAggregateVotesRequest().fromJsonString(jsonString, options)
  }

  static equals(
    a:
      | QueryAggregateVotesRequest
      | PlainMessage<QueryAggregateVotesRequest>
      | undefined,
    b:
      | QueryAggregateVotesRequest
      | PlainMessage<QueryAggregateVotesRequest>
      | undefined,
  ): boolean {
    return proto3.util.equals(QueryAggregateVotesRequest, a, b)
  }
}

/**
 * QueryAggregateVotesResponse is response type for the
 * Query/AggregateVotes RPC method.
 *
 * @generated from message nibiru.oracle.v1.QueryAggregateVotesResponse
 */
export class QueryAggregateVotesResponse extends Message<QueryAggregateVotesResponse> {
  /**
   * aggregate_votes defines all oracle aggregate votes submitted in the current
   * vote period
   *
   * @generated from field: repeated nibiru.oracle.v1.AggregateExchangeRateVote aggregate_votes = 1;
   */
  aggregateVotes: AggregateExchangeRateVote[] = []

  constructor(data?: PartialMessage<QueryAggregateVotesResponse>) {
    super()
    proto3.util.initPartial(data, this)
  }

  static readonly runtime: typeof proto3 = proto3
  static readonly typeName = "nibiru.oracle.v1.QueryAggregateVotesResponse"
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    {
      no: 1,
      name: "aggregate_votes",
      kind: "message",
      T: AggregateExchangeRateVote,
      repeated: true,
    },
  ])

  static fromBinary(
    bytes: Uint8Array,
    options?: Partial<BinaryReadOptions>,
  ): QueryAggregateVotesResponse {
    return new QueryAggregateVotesResponse().fromBinary(bytes, options)
  }

  static fromJson(
    jsonValue: JsonValue,
    options?: Partial<JsonReadOptions>,
  ): QueryAggregateVotesResponse {
    return new QueryAggregateVotesResponse().fromJson(jsonValue, options)
  }

  static fromJsonString(
    jsonString: string,
    options?: Partial<JsonReadOptions>,
  ): QueryAggregateVotesResponse {
    return new QueryAggregateVotesResponse().fromJsonString(jsonString, options)
  }

  static equals(
    a:
      | QueryAggregateVotesResponse
      | PlainMessage<QueryAggregateVotesResponse>
      | undefined,
    b:
      | QueryAggregateVotesResponse
      | PlainMessage<QueryAggregateVotesResponse>
      | undefined,
  ): boolean {
    return proto3.util.equals(QueryAggregateVotesResponse, a, b)
  }
}

/**
 * QueryParamsRequest is the request type for the Query/Params RPC method.
 *
 * @generated from message nibiru.oracle.v1.QueryParamsRequest
 */
export class QueryParamsRequest extends Message<QueryParamsRequest> {
  constructor(data?: PartialMessage<QueryParamsRequest>) {
    super()
    proto3.util.initPartial(data, this)
  }

  static readonly runtime: typeof proto3 = proto3
  static readonly typeName = "nibiru.oracle.v1.QueryParamsRequest"
  static readonly fields: FieldList = proto3.util.newFieldList(() => [])

  static fromBinary(
    bytes: Uint8Array,
    options?: Partial<BinaryReadOptions>,
  ): QueryParamsRequest {
    return new QueryParamsRequest().fromBinary(bytes, options)
  }

  static fromJson(
    jsonValue: JsonValue,
    options?: Partial<JsonReadOptions>,
  ): QueryParamsRequest {
    return new QueryParamsRequest().fromJson(jsonValue, options)
  }

  static fromJsonString(
    jsonString: string,
    options?: Partial<JsonReadOptions>,
  ): QueryParamsRequest {
    return new QueryParamsRequest().fromJsonString(jsonString, options)
  }

  static equals(
    a: QueryParamsRequest | PlainMessage<QueryParamsRequest> | undefined,
    b: QueryParamsRequest | PlainMessage<QueryParamsRequest> | undefined,
  ): boolean {
    return proto3.util.equals(QueryParamsRequest, a, b)
  }
}

/**
 * QueryParamsResponse is the response type for the Query/Params RPC method.
 *
 * @generated from message nibiru.oracle.v1.QueryParamsResponse
 */
export class QueryParamsResponse extends Message<QueryParamsResponse> {
  /**
   * params defines the parameters of the module.
   *
   * @generated from field: nibiru.oracle.v1.Params params = 1;
   */
  params?: Params

  constructor(data?: PartialMessage<QueryParamsResponse>) {
    super()
    proto3.util.initPartial(data, this)
  }

  static readonly runtime: typeof proto3 = proto3
  static readonly typeName = "nibiru.oracle.v1.QueryParamsResponse"
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "params", kind: "message", T: Params },
  ])

  static fromBinary(
    bytes: Uint8Array,
    options?: Partial<BinaryReadOptions>,
  ): QueryParamsResponse {
    return new QueryParamsResponse().fromBinary(bytes, options)
  }

  static fromJson(
    jsonValue: JsonValue,
    options?: Partial<JsonReadOptions>,
  ): QueryParamsResponse {
    return new QueryParamsResponse().fromJson(jsonValue, options)
  }

  static fromJsonString(
    jsonString: string,
    options?: Partial<JsonReadOptions>,
  ): QueryParamsResponse {
    return new QueryParamsResponse().fromJsonString(jsonString, options)
  }

  static equals(
    a: QueryParamsResponse | PlainMessage<QueryParamsResponse> | undefined,
    b: QueryParamsResponse | PlainMessage<QueryParamsResponse> | undefined,
  ): boolean {
    return proto3.util.equals(QueryParamsResponse, a, b)
  }
}
