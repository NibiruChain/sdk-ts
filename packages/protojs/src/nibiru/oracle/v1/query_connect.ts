// @generated by protoc-gen-connect-es v0.10.1 with parameter "target=ts"
// @generated from file nibiru/oracle/v1/query.proto (package nibiru.oracle.v1, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import {
  QueryActivesRequest,
  QueryActivesResponse,
  QueryAggregatePrevoteRequest,
  QueryAggregatePrevoteResponse,
  QueryAggregatePrevotesRequest,
  QueryAggregatePrevotesResponse,
  QueryAggregateVoteRequest,
  QueryAggregateVoteResponse,
  QueryAggregateVotesRequest,
  QueryAggregateVotesResponse,
  QueryExchangeRateRequest,
  QueryExchangeRateResponse,
  QueryExchangeRatesRequest,
  QueryExchangeRatesResponse,
  QueryFeederDelegationRequest,
  QueryFeederDelegationResponse,
  QueryMissCounterRequest,
  QueryMissCounterResponse,
  QueryParamsRequest,
  QueryParamsResponse,
  QueryVoteTargetsRequest,
  QueryVoteTargetsResponse,
} from "./query_pb.js"
import { MethodKind } from "@bufbuild/protobuf"

/**
 * Query defines the gRPC querier service.
 *
 * @generated from service nibiru.oracle.v1.Query
 */
export const Query = {
  typeName: "nibiru.oracle.v1.Query",
  methods: {
    /**
     * ExchangeRate returns exchange rate of a pair
     *
     * @generated from rpc nibiru.oracle.v1.Query.ExchangeRate
     */
    exchangeRate: {
      name: "ExchangeRate",
      I: QueryExchangeRateRequest,
      O: QueryExchangeRateResponse,
      kind: MethodKind.Unary,
    },
    /**
     * ExchangeRateTwap returns twap exchange rate of a pair
     *
     * @generated from rpc nibiru.oracle.v1.Query.ExchangeRateTwap
     */
    exchangeRateTwap: {
      name: "ExchangeRateTwap",
      I: QueryExchangeRateRequest,
      O: QueryExchangeRateResponse,
      kind: MethodKind.Unary,
    },
    /**
     * ExchangeRates returns exchange rates of all pairs
     *
     * @generated from rpc nibiru.oracle.v1.Query.ExchangeRates
     */
    exchangeRates: {
      name: "ExchangeRates",
      I: QueryExchangeRatesRequest,
      O: QueryExchangeRatesResponse,
      kind: MethodKind.Unary,
    },
    /**
     * Actives returns all active pairs
     *
     * @generated from rpc nibiru.oracle.v1.Query.Actives
     */
    actives: {
      name: "Actives",
      I: QueryActivesRequest,
      O: QueryActivesResponse,
      kind: MethodKind.Unary,
    },
    /**
     * VoteTargets returns all vote target for pairs
     *
     * @generated from rpc nibiru.oracle.v1.Query.VoteTargets
     */
    voteTargets: {
      name: "VoteTargets",
      I: QueryVoteTargetsRequest,
      O: QueryVoteTargetsResponse,
      kind: MethodKind.Unary,
    },
    /**
     * FeederDelegation returns feeder delegation of a validator
     *
     * @generated from rpc nibiru.oracle.v1.Query.FeederDelegation
     */
    feederDelegation: {
      name: "FeederDelegation",
      I: QueryFeederDelegationRequest,
      O: QueryFeederDelegationResponse,
      kind: MethodKind.Unary,
    },
    /**
     * MissCounter returns oracle miss counter of a validator
     *
     * @generated from rpc nibiru.oracle.v1.Query.MissCounter
     */
    missCounter: {
      name: "MissCounter",
      I: QueryMissCounterRequest,
      O: QueryMissCounterResponse,
      kind: MethodKind.Unary,
    },
    /**
     * AggregatePrevote returns an aggregate prevote of a validator
     *
     * @generated from rpc nibiru.oracle.v1.Query.AggregatePrevote
     */
    aggregatePrevote: {
      name: "AggregatePrevote",
      I: QueryAggregatePrevoteRequest,
      O: QueryAggregatePrevoteResponse,
      kind: MethodKind.Unary,
    },
    /**
     * AggregatePrevotes returns aggregate prevotes of all validators
     *
     * @generated from rpc nibiru.oracle.v1.Query.AggregatePrevotes
     */
    aggregatePrevotes: {
      name: "AggregatePrevotes",
      I: QueryAggregatePrevotesRequest,
      O: QueryAggregatePrevotesResponse,
      kind: MethodKind.Unary,
    },
    /**
     * AggregateVote returns an aggregate vote of a validator
     *
     * @generated from rpc nibiru.oracle.v1.Query.AggregateVote
     */
    aggregateVote: {
      name: "AggregateVote",
      I: QueryAggregateVoteRequest,
      O: QueryAggregateVoteResponse,
      kind: MethodKind.Unary,
    },
    /**
     * AggregateVotes returns aggregate votes of all validators
     *
     * @generated from rpc nibiru.oracle.v1.Query.AggregateVotes
     */
    aggregateVotes: {
      name: "AggregateVotes",
      I: QueryAggregateVotesRequest,
      O: QueryAggregateVotesResponse,
      kind: MethodKind.Unary,
    },
    /**
     * Params queries all parameters.
     *
     * @generated from rpc nibiru.oracle.v1.Query.Params
     */
    params: {
      name: "Params",
      I: QueryParamsRequest,
      O: QueryParamsResponse,
      kind: MethodKind.Unary,
    },
  },
} as const
