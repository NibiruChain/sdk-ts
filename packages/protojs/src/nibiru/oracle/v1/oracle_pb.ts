// @generated by protoc-gen-es v1.2.1 with parameter "target=ts"
// @generated from file nibiru/oracle/v1/oracle.proto (package nibiru.oracle.v1, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type {
  BinaryReadOptions,
  FieldList,
  JsonReadOptions,
  JsonValue,
  PartialMessage,
  PlainMessage,
} from "@bufbuild/protobuf"
import { Duration, Message, proto3, protoInt64 } from "@bufbuild/protobuf"
import { Coin } from "../../../cosmos/base/v1beta1/coin_pb.js"

/**
 * Params defines the module parameters for the x/oracle module.
 *
 * @generated from message nibiru.oracle.v1.Params
 */
export class Params extends Message<Params> {
  /**
   * VotePeriod defines the number of blocks during which voting takes place.
   *
   * @generated from field: uint64 vote_period = 1;
   */
  votePeriod = protoInt64.zero

  /**
   * VoteThreshold specifies the minimum proportion of votes that must be
   * received for a ballot to pass.
   *
   * @generated from field: string vote_threshold = 2;
   */
  voteThreshold = ""

  /**
   * RewardBand defines a maxium divergence that a price vote can have from the
   * weighted median in the ballot. If a vote lies within the valid range
   * defined by:
   * 	μ := weightedMedian,
   * 	validRange := μ ± (μ * rewardBand / 2),
   * then rewards are added to the validator performance.
   * Note that if the reward band is smaller than 1 standard
   * deviation, the band is taken to be 1 standard deviation.a price
   *
   * @generated from field: string reward_band = 3;
   */
  rewardBand = ""

  /**
   * The set of whitelisted markets, or asset pairs, for the module.
   * Ex. '["unibi:uusd","ubtc:uusd"]'
   *
   * @generated from field: repeated string whitelist = 4;
   */
  whitelist: string[] = []

  /**
   * SlashFraction returns the proportion of an oracle's stake that gets
   * slashed in the event of slashing. `SlashFraction` specifies the exact
   * penalty for failing a voting period.
   *
   * @generated from field: string slash_fraction = 5;
   */
  slashFraction = ""

  /**
   * SlashWindow returns the number of voting periods that specify a
   * "slash window". After each slash window, all oracles that have missed more
   * than the penalty threshold are slashed. Missing the penalty threshold is
   * synonymous with submitting fewer valid votes than `MinValidPerWindow`.
   *
   * @generated from field: uint64 slash_window = 6;
   */
  slashWindow = protoInt64.zero

  /**
   * @generated from field: string min_valid_per_window = 7;
   */
  minValidPerWindow = ""

  /**
   * Amount of time to look back for TWAP calculations
   *
   * @generated from field: google.protobuf.Duration twap_lookback_window = 8;
   */
  twapLookbackWindow?: Duration

  /**
   * The minimum number of voters (i.e. oracle validators) per pair for it to be
   * considered a passing ballot. Recommended at least 4.
   *
   * @generated from field: uint64 min_voters = 9;
   */
  minVoters = protoInt64.zero

  /**
   * The validator fee ratio that is given to validators every epoch.
   *
   * @generated from field: string validator_fee_ratio = 10;
   */
  validatorFeeRatio = ""

  /**
   * @generated from field: uint64 expiration_blocks = 11;
   */
  expirationBlocks = protoInt64.zero

  constructor(data?: PartialMessage<Params>) {
    super()
    proto3.util.initPartial(data, this)
  }

  static readonly runtime: typeof proto3 = proto3
  static readonly typeName = "nibiru.oracle.v1.Params"
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "vote_period", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 2, name: "vote_threshold", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "reward_band", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    {
      no: 4,
      name: "whitelist",
      kind: "scalar",
      T: 9 /* ScalarType.STRING */,
      repeated: true,
    },
    { no: 5, name: "slash_fraction", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 6, name: "slash_window", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    {
      no: 7,
      name: "min_valid_per_window",
      kind: "scalar",
      T: 9 /* ScalarType.STRING */,
    },
    { no: 8, name: "twap_lookback_window", kind: "message", T: Duration },
    { no: 9, name: "min_voters", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    {
      no: 10,
      name: "validator_fee_ratio",
      kind: "scalar",
      T: 9 /* ScalarType.STRING */,
    },
    { no: 11, name: "expiration_blocks", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
  ])

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Params {
    return new Params().fromBinary(bytes, options)
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Params {
    return new Params().fromJson(jsonValue, options)
  }

  static fromJsonString(
    jsonString: string,
    options?: Partial<JsonReadOptions>,
  ): Params {
    return new Params().fromJsonString(jsonString, options)
  }

  static equals(
    a: Params | PlainMessage<Params> | undefined,
    b: Params | PlainMessage<Params> | undefined,
  ): boolean {
    return proto3.util.equals(Params, a, b)
  }
}

/**
 * Struct for aggregate prevoting on the ExchangeRateVote.
 * The purpose of aggregate prevote is to hide vote exchange rates with hash
 * which is formatted as hex string in
 * SHA256("{salt}:({pair},{exchange_rate})|...|({pair},{exchange_rate}):{voter}")
 *
 * @generated from message nibiru.oracle.v1.AggregateExchangeRatePrevote
 */
export class AggregateExchangeRatePrevote extends Message<AggregateExchangeRatePrevote> {
  /**
   * @generated from field: string hash = 1;
   */
  hash = ""

  /**
   * @generated from field: string voter = 2;
   */
  voter = ""

  /**
   * @generated from field: uint64 submit_block = 3;
   */
  submitBlock = protoInt64.zero

  constructor(data?: PartialMessage<AggregateExchangeRatePrevote>) {
    super()
    proto3.util.initPartial(data, this)
  }

  static readonly runtime: typeof proto3 = proto3
  static readonly typeName = "nibiru.oracle.v1.AggregateExchangeRatePrevote"
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "hash", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "voter", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "submit_block", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
  ])

  static fromBinary(
    bytes: Uint8Array,
    options?: Partial<BinaryReadOptions>,
  ): AggregateExchangeRatePrevote {
    return new AggregateExchangeRatePrevote().fromBinary(bytes, options)
  }

  static fromJson(
    jsonValue: JsonValue,
    options?: Partial<JsonReadOptions>,
  ): AggregateExchangeRatePrevote {
    return new AggregateExchangeRatePrevote().fromJson(jsonValue, options)
  }

  static fromJsonString(
    jsonString: string,
    options?: Partial<JsonReadOptions>,
  ): AggregateExchangeRatePrevote {
    return new AggregateExchangeRatePrevote().fromJsonString(jsonString, options)
  }

  static equals(
    a:
      | AggregateExchangeRatePrevote
      | PlainMessage<AggregateExchangeRatePrevote>
      | undefined,
    b:
      | AggregateExchangeRatePrevote
      | PlainMessage<AggregateExchangeRatePrevote>
      | undefined,
  ): boolean {
    return proto3.util.equals(AggregateExchangeRatePrevote, a, b)
  }
}

/**
 * MsgAggregateExchangeRateVote - struct for voting on
 * the exchange rates different assets.
 *
 * @generated from message nibiru.oracle.v1.AggregateExchangeRateVote
 */
export class AggregateExchangeRateVote extends Message<AggregateExchangeRateVote> {
  /**
   * @generated from field: repeated nibiru.oracle.v1.ExchangeRateTuple exchange_rate_tuples = 1;
   */
  exchangeRateTuples: ExchangeRateTuple[] = []

  /**
   * @generated from field: string voter = 2;
   */
  voter = ""

  constructor(data?: PartialMessage<AggregateExchangeRateVote>) {
    super()
    proto3.util.initPartial(data, this)
  }

  static readonly runtime: typeof proto3 = proto3
  static readonly typeName = "nibiru.oracle.v1.AggregateExchangeRateVote"
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    {
      no: 1,
      name: "exchange_rate_tuples",
      kind: "message",
      T: ExchangeRateTuple,
      repeated: true,
    },
    { no: 2, name: "voter", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ])

  static fromBinary(
    bytes: Uint8Array,
    options?: Partial<BinaryReadOptions>,
  ): AggregateExchangeRateVote {
    return new AggregateExchangeRateVote().fromBinary(bytes, options)
  }

  static fromJson(
    jsonValue: JsonValue,
    options?: Partial<JsonReadOptions>,
  ): AggregateExchangeRateVote {
    return new AggregateExchangeRateVote().fromJson(jsonValue, options)
  }

  static fromJsonString(
    jsonString: string,
    options?: Partial<JsonReadOptions>,
  ): AggregateExchangeRateVote {
    return new AggregateExchangeRateVote().fromJsonString(jsonString, options)
  }

  static equals(
    a: AggregateExchangeRateVote | PlainMessage<AggregateExchangeRateVote> | undefined,
    b: AggregateExchangeRateVote | PlainMessage<AggregateExchangeRateVote> | undefined,
  ): boolean {
    return proto3.util.equals(AggregateExchangeRateVote, a, b)
  }
}

/**
 * ExchangeRateTuple - struct to store interpreted exchange rates data to store
 *
 * @generated from message nibiru.oracle.v1.ExchangeRateTuple
 */
export class ExchangeRateTuple extends Message<ExchangeRateTuple> {
  /**
   * @generated from field: string pair = 1;
   */
  pair = ""

  /**
   * @generated from field: string exchange_rate = 2;
   */
  exchangeRate = ""

  constructor(data?: PartialMessage<ExchangeRateTuple>) {
    super()
    proto3.util.initPartial(data, this)
  }

  static readonly runtime: typeof proto3 = proto3
  static readonly typeName = "nibiru.oracle.v1.ExchangeRateTuple"
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "pair", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "exchange_rate", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ])

  static fromBinary(
    bytes: Uint8Array,
    options?: Partial<BinaryReadOptions>,
  ): ExchangeRateTuple {
    return new ExchangeRateTuple().fromBinary(bytes, options)
  }

  static fromJson(
    jsonValue: JsonValue,
    options?: Partial<JsonReadOptions>,
  ): ExchangeRateTuple {
    return new ExchangeRateTuple().fromJson(jsonValue, options)
  }

  static fromJsonString(
    jsonString: string,
    options?: Partial<JsonReadOptions>,
  ): ExchangeRateTuple {
    return new ExchangeRateTuple().fromJsonString(jsonString, options)
  }

  static equals(
    a: ExchangeRateTuple | PlainMessage<ExchangeRateTuple> | undefined,
    b: ExchangeRateTuple | PlainMessage<ExchangeRateTuple> | undefined,
  ): boolean {
    return proto3.util.equals(ExchangeRateTuple, a, b)
  }
}

/**
 * @generated from message nibiru.oracle.v1.DatedPrice
 */
export class DatedPrice extends Message<DatedPrice> {
  /**
   * @generated from field: string exchange_rate = 1;
   */
  exchangeRate = ""

  /**
   * @generated from field: uint64 created_block = 2;
   */
  createdBlock = protoInt64.zero

  constructor(data?: PartialMessage<DatedPrice>) {
    super()
    proto3.util.initPartial(data, this)
  }

  static readonly runtime: typeof proto3 = proto3
  static readonly typeName = "nibiru.oracle.v1.DatedPrice"
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "exchange_rate", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "created_block", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
  ])

  static fromBinary(
    bytes: Uint8Array,
    options?: Partial<BinaryReadOptions>,
  ): DatedPrice {
    return new DatedPrice().fromBinary(bytes, options)
  }

  static fromJson(
    jsonValue: JsonValue,
    options?: Partial<JsonReadOptions>,
  ): DatedPrice {
    return new DatedPrice().fromJson(jsonValue, options)
  }

  static fromJsonString(
    jsonString: string,
    options?: Partial<JsonReadOptions>,
  ): DatedPrice {
    return new DatedPrice().fromJsonString(jsonString, options)
  }

  static equals(
    a: DatedPrice | PlainMessage<DatedPrice> | undefined,
    b: DatedPrice | PlainMessage<DatedPrice> | undefined,
  ): boolean {
    return proto3.util.equals(DatedPrice, a, b)
  }
}

/**
 * Rewards defines a credit object towards validators
 * which provide prices faithfully for different pairs.
 *
 * @generated from message nibiru.oracle.v1.Rewards
 */
export class Rewards extends Message<Rewards> {
  /**
   * id uniquely identifies the rewards instance of the pair
   *
   * @generated from field: uint64 id = 1;
   */
  id = protoInt64.zero

  /**
   * vote_periods defines the vote periods left in which rewards will be
   * distributed.
   *
   * @generated from field: uint64 vote_periods = 2;
   */
  votePeriods = protoInt64.zero

  /**
   * Coins defines the amount of coins to distribute in a single vote period.
   *
   * @generated from field: repeated cosmos.base.v1beta1.Coin coins = 3;
   */
  coins: Coin[] = []

  constructor(data?: PartialMessage<Rewards>) {
    super()
    proto3.util.initPartial(data, this)
  }

  static readonly runtime: typeof proto3 = proto3
  static readonly typeName = "nibiru.oracle.v1.Rewards"
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "id", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 2, name: "vote_periods", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 3, name: "coins", kind: "message", T: Coin, repeated: true },
  ])

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Rewards {
    return new Rewards().fromBinary(bytes, options)
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Rewards {
    return new Rewards().fromJson(jsonValue, options)
  }

  static fromJsonString(
    jsonString: string,
    options?: Partial<JsonReadOptions>,
  ): Rewards {
    return new Rewards().fromJsonString(jsonString, options)
  }

  static equals(
    a: Rewards | PlainMessage<Rewards> | undefined,
    b: Rewards | PlainMessage<Rewards> | undefined,
  ): boolean {
    return proto3.util.equals(Rewards, a, b)
  }
}
