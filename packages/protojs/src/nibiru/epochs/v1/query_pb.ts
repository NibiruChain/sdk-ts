// @generated by protoc-gen-es v1.2.1 with parameter "target=ts"
// @generated from file nibiru/epochs/v1/query.proto (package nibiru.epochs.v1, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type {
  BinaryReadOptions,
  FieldList,
  JsonReadOptions,
  JsonValue,
  PartialMessage,
  PlainMessage,
} from "@bufbuild/protobuf"
import { Message, proto3, protoInt64 } from "@bufbuild/protobuf"
import { EpochInfo } from "./state_pb.js"

/**
 * @generated from message nibiru.epochs.v1.QueryEpochsInfoRequest
 */
export class QueryEpochsInfoRequest extends Message<QueryEpochsInfoRequest> {
  constructor(data?: PartialMessage<QueryEpochsInfoRequest>) {
    super()
    proto3.util.initPartial(data, this)
  }

  static readonly runtime: typeof proto3 = proto3
  static readonly typeName = "nibiru.epochs.v1.QueryEpochsInfoRequest"
  static readonly fields: FieldList = proto3.util.newFieldList(() => [])

  static fromBinary(
    bytes: Uint8Array,
    options?: Partial<BinaryReadOptions>,
  ): QueryEpochsInfoRequest {
    return new QueryEpochsInfoRequest().fromBinary(bytes, options)
  }

  static fromJson(
    jsonValue: JsonValue,
    options?: Partial<JsonReadOptions>,
  ): QueryEpochsInfoRequest {
    return new QueryEpochsInfoRequest().fromJson(jsonValue, options)
  }

  static fromJsonString(
    jsonString: string,
    options?: Partial<JsonReadOptions>,
  ): QueryEpochsInfoRequest {
    return new QueryEpochsInfoRequest().fromJsonString(jsonString, options)
  }

  static equals(
    a: QueryEpochsInfoRequest | PlainMessage<QueryEpochsInfoRequest> | undefined,
    b: QueryEpochsInfoRequest | PlainMessage<QueryEpochsInfoRequest> | undefined,
  ): boolean {
    return proto3.util.equals(QueryEpochsInfoRequest, a, b)
  }
}

/**
 * @generated from message nibiru.epochs.v1.QueryEpochsInfoResponse
 */
export class QueryEpochsInfoResponse extends Message<QueryEpochsInfoResponse> {
  /**
   * @generated from field: repeated nibiru.epochs.v1.EpochInfo epochs = 1;
   */
  epochs: EpochInfo[] = []

  constructor(data?: PartialMessage<QueryEpochsInfoResponse>) {
    super()
    proto3.util.initPartial(data, this)
  }

  static readonly runtime: typeof proto3 = proto3
  static readonly typeName = "nibiru.epochs.v1.QueryEpochsInfoResponse"
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "epochs", kind: "message", T: EpochInfo, repeated: true },
  ])

  static fromBinary(
    bytes: Uint8Array,
    options?: Partial<BinaryReadOptions>,
  ): QueryEpochsInfoResponse {
    return new QueryEpochsInfoResponse().fromBinary(bytes, options)
  }

  static fromJson(
    jsonValue: JsonValue,
    options?: Partial<JsonReadOptions>,
  ): QueryEpochsInfoResponse {
    return new QueryEpochsInfoResponse().fromJson(jsonValue, options)
  }

  static fromJsonString(
    jsonString: string,
    options?: Partial<JsonReadOptions>,
  ): QueryEpochsInfoResponse {
    return new QueryEpochsInfoResponse().fromJsonString(jsonString, options)
  }

  static equals(
    a: QueryEpochsInfoResponse | PlainMessage<QueryEpochsInfoResponse> | undefined,
    b: QueryEpochsInfoResponse | PlainMessage<QueryEpochsInfoResponse> | undefined,
  ): boolean {
    return proto3.util.equals(QueryEpochsInfoResponse, a, b)
  }
}

/**
 * @generated from message nibiru.epochs.v1.QueryCurrentEpochRequest
 */
export class QueryCurrentEpochRequest extends Message<QueryCurrentEpochRequest> {
  /**
   * @generated from field: string identifier = 1;
   */
  identifier = ""

  constructor(data?: PartialMessage<QueryCurrentEpochRequest>) {
    super()
    proto3.util.initPartial(data, this)
  }

  static readonly runtime: typeof proto3 = proto3
  static readonly typeName = "nibiru.epochs.v1.QueryCurrentEpochRequest"
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "identifier", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ])

  static fromBinary(
    bytes: Uint8Array,
    options?: Partial<BinaryReadOptions>,
  ): QueryCurrentEpochRequest {
    return new QueryCurrentEpochRequest().fromBinary(bytes, options)
  }

  static fromJson(
    jsonValue: JsonValue,
    options?: Partial<JsonReadOptions>,
  ): QueryCurrentEpochRequest {
    return new QueryCurrentEpochRequest().fromJson(jsonValue, options)
  }

  static fromJsonString(
    jsonString: string,
    options?: Partial<JsonReadOptions>,
  ): QueryCurrentEpochRequest {
    return new QueryCurrentEpochRequest().fromJsonString(jsonString, options)
  }

  static equals(
    a: QueryCurrentEpochRequest | PlainMessage<QueryCurrentEpochRequest> | undefined,
    b: QueryCurrentEpochRequest | PlainMessage<QueryCurrentEpochRequest> | undefined,
  ): boolean {
    return proto3.util.equals(QueryCurrentEpochRequest, a, b)
  }
}

/**
 * @generated from message nibiru.epochs.v1.QueryCurrentEpochResponse
 */
export class QueryCurrentEpochResponse extends Message<QueryCurrentEpochResponse> {
  /**
   * @generated from field: uint64 current_epoch = 1;
   */
  currentEpoch = protoInt64.zero

  constructor(data?: PartialMessage<QueryCurrentEpochResponse>) {
    super()
    proto3.util.initPartial(data, this)
  }

  static readonly runtime: typeof proto3 = proto3
  static readonly typeName = "nibiru.epochs.v1.QueryCurrentEpochResponse"
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "current_epoch", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
  ])

  static fromBinary(
    bytes: Uint8Array,
    options?: Partial<BinaryReadOptions>,
  ): QueryCurrentEpochResponse {
    return new QueryCurrentEpochResponse().fromBinary(bytes, options)
  }

  static fromJson(
    jsonValue: JsonValue,
    options?: Partial<JsonReadOptions>,
  ): QueryCurrentEpochResponse {
    return new QueryCurrentEpochResponse().fromJson(jsonValue, options)
  }

  static fromJsonString(
    jsonString: string,
    options?: Partial<JsonReadOptions>,
  ): QueryCurrentEpochResponse {
    return new QueryCurrentEpochResponse().fromJsonString(jsonString, options)
  }

  static equals(
    a: QueryCurrentEpochResponse | PlainMessage<QueryCurrentEpochResponse> | undefined,
    b: QueryCurrentEpochResponse | PlainMessage<QueryCurrentEpochResponse> | undefined,
  ): boolean {
    return proto3.util.equals(QueryCurrentEpochResponse, a, b)
  }
}
