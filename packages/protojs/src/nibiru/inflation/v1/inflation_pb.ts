// @generated by protoc-gen-es v1.2.1 with parameter "target=ts"
// @generated from file nibiru/inflation/v1/inflation.proto (package nibiru.inflation.v1, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type {
  BinaryReadOptions,
  FieldList,
  JsonReadOptions,
  JsonValue,
  PartialMessage,
  PlainMessage,
} from "@bufbuild/protobuf"
import { Message, proto3 } from "@bufbuild/protobuf"

/**
 * InflationDistribution defines the distribution in which inflation is
 * allocated through minting on each epoch (staking, community, strategic). It
 * excludes the team vesting distribution.
 *
 * @generated from message nibiru.inflation.v1.InflationDistribution
 */
export class InflationDistribution extends Message<InflationDistribution> {
  /**
   * staking_rewards defines the proportion of the minted_denom that is
   * to be allocated as staking rewards
   *
   * @generated from field: string staking_rewards = 1;
   */
  stakingRewards = ""

  /**
   * community_pool defines the proportion of the minted_denom that is to
   * be allocated to the community pool
   *
   * @generated from field: string community_pool = 2;
   */
  communityPool = ""

  /**
   * strategic_reserves defines the proportion of the minted_denom that
   * is to be allocated to the strategic reserves module address
   *
   * @generated from field: string strategic_reserves = 3;
   */
  strategicReserves = ""

  constructor(data?: PartialMessage<InflationDistribution>) {
    super()
    proto3.util.initPartial(data, this)
  }

  static readonly runtime: typeof proto3 = proto3
  static readonly typeName = "nibiru.inflation.v1.InflationDistribution"
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "staking_rewards", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "community_pool", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "strategic_reserves", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ])

  static fromBinary(
    bytes: Uint8Array,
    options?: Partial<BinaryReadOptions>,
  ): InflationDistribution {
    return new InflationDistribution().fromBinary(bytes, options)
  }

  static fromJson(
    jsonValue: JsonValue,
    options?: Partial<JsonReadOptions>,
  ): InflationDistribution {
    return new InflationDistribution().fromJson(jsonValue, options)
  }

  static fromJsonString(
    jsonString: string,
    options?: Partial<JsonReadOptions>,
  ): InflationDistribution {
    return new InflationDistribution().fromJsonString(jsonString, options)
  }

  static equals(
    a: InflationDistribution | PlainMessage<InflationDistribution> | undefined,
    b: InflationDistribution | PlainMessage<InflationDistribution> | undefined,
  ): boolean {
    return proto3.util.equals(InflationDistribution, a, b)
  }
}

/**
 * ExponentialCalculation holds factors to calculate exponential inflation on
 * each period. Calculation reference:
 * periodProvision = exponentialDecay
 * f(x)            = a * (1 - r) ^ x + c
 *
 * @generated from message nibiru.inflation.v1.ExponentialCalculation
 */
export class ExponentialCalculation extends Message<ExponentialCalculation> {
  /**
   * a defines the initial value
   *
   * @generated from field: string a = 1;
   */
  a = ""

  /**
   * r defines the reduction factor
   *
   * @generated from field: string r = 2;
   */
  r = ""

  /**
   * c defines the parameter for long term inflation
   *
   * @generated from field: string c = 3;
   */
  c = ""

  constructor(data?: PartialMessage<ExponentialCalculation>) {
    super()
    proto3.util.initPartial(data, this)
  }

  static readonly runtime: typeof proto3 = proto3
  static readonly typeName = "nibiru.inflation.v1.ExponentialCalculation"
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "a", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "r", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "c", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ])

  static fromBinary(
    bytes: Uint8Array,
    options?: Partial<BinaryReadOptions>,
  ): ExponentialCalculation {
    return new ExponentialCalculation().fromBinary(bytes, options)
  }

  static fromJson(
    jsonValue: JsonValue,
    options?: Partial<JsonReadOptions>,
  ): ExponentialCalculation {
    return new ExponentialCalculation().fromJson(jsonValue, options)
  }

  static fromJsonString(
    jsonString: string,
    options?: Partial<JsonReadOptions>,
  ): ExponentialCalculation {
    return new ExponentialCalculation().fromJsonString(jsonString, options)
  }

  static equals(
    a: ExponentialCalculation | PlainMessage<ExponentialCalculation> | undefined,
    b: ExponentialCalculation | PlainMessage<ExponentialCalculation> | undefined,
  ): boolean {
    return proto3.util.equals(ExponentialCalculation, a, b)
  }
}
