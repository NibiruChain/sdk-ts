// @generated by protoc-gen-es v1.2.1 with parameter "target=ts"
// @generated from file nibiru/inflation/v1/genesis.proto (package nibiru.inflation.v1, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type {
  BinaryReadOptions,
  FieldList,
  JsonReadOptions,
  JsonValue,
  PartialMessage,
  PlainMessage,
} from "@bufbuild/protobuf"
import { Message, proto3, protoInt64 } from "@bufbuild/protobuf"
import { ExponentialCalculation, InflationDistribution } from "./inflation_pb.js"

/**
 * GenesisState defines the inflation module's genesis state.
 *
 * @generated from message nibiru.inflation.v1.GenesisState
 */
export class GenesisState extends Message<GenesisState> {
  /**
   * params defines all the parameters of the module.
   *
   * @generated from field: nibiru.inflation.v1.Params params = 1;
   */
  params?: Params

  /**
   * period is the amount of past periods, based on the epochs per period param
   *
   * @generated from field: uint64 period = 2;
   */
  period = protoInt64.zero

  /**
   * skipped_epochs is the number of epochs that have passed while inflation is
   * disabled
   *
   * @generated from field: uint64 skipped_epochs = 3;
   */
  skippedEpochs = protoInt64.zero

  constructor(data?: PartialMessage<GenesisState>) {
    super()
    proto3.util.initPartial(data, this)
  }

  static readonly runtime: typeof proto3 = proto3
  static readonly typeName = "nibiru.inflation.v1.GenesisState"
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "params", kind: "message", T: Params },
    { no: 2, name: "period", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 3, name: "skipped_epochs", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
  ])

  static fromBinary(
    bytes: Uint8Array,
    options?: Partial<BinaryReadOptions>,
  ): GenesisState {
    return new GenesisState().fromBinary(bytes, options)
  }

  static fromJson(
    jsonValue: JsonValue,
    options?: Partial<JsonReadOptions>,
  ): GenesisState {
    return new GenesisState().fromJson(jsonValue, options)
  }

  static fromJsonString(
    jsonString: string,
    options?: Partial<JsonReadOptions>,
  ): GenesisState {
    return new GenesisState().fromJsonString(jsonString, options)
  }

  static equals(
    a: GenesisState | PlainMessage<GenesisState> | undefined,
    b: GenesisState | PlainMessage<GenesisState> | undefined,
  ): boolean {
    return proto3.util.equals(GenesisState, a, b)
  }
}

/**
 * Params holds parameters for the inflation module.
 *
 * @generated from message nibiru.inflation.v1.Params
 */
export class Params extends Message<Params> {
  /**
   * inflation_enabled is the parameter that enables inflation and halts
   * increasing the skipped_epochs
   *
   * @generated from field: bool inflation_enabled = 1;
   */
  inflationEnabled = false

  /**
   * exponential_calculation takes in the variables to calculate exponential
   * inflation
   *
   * @generated from field: nibiru.inflation.v1.ExponentialCalculation exponential_calculation = 2;
   */
  exponentialCalculation?: ExponentialCalculation

  /**
   * inflation_distribution of the minted denom
   *
   * @generated from field: nibiru.inflation.v1.InflationDistribution inflation_distribution = 3;
   */
  inflationDistribution?: InflationDistribution

  /**
   * epochs_per_period is the number of epochs that must pass before a new
   * period is created
   *
   * @generated from field: uint64 epochs_per_period = 4;
   */
  epochsPerPeriod = protoInt64.zero

  constructor(data?: PartialMessage<Params>) {
    super()
    proto3.util.initPartial(data, this)
  }

  static readonly runtime: typeof proto3 = proto3
  static readonly typeName = "nibiru.inflation.v1.Params"
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "inflation_enabled", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
    {
      no: 2,
      name: "exponential_calculation",
      kind: "message",
      T: ExponentialCalculation,
    },
    {
      no: 3,
      name: "inflation_distribution",
      kind: "message",
      T: InflationDistribution,
    },
    { no: 4, name: "epochs_per_period", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
  ])

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Params {
    return new Params().fromBinary(bytes, options)
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Params {
    return new Params().fromJson(jsonValue, options)
  }

  static fromJsonString(
    jsonString: string,
    options?: Partial<JsonReadOptions>,
  ): Params {
    return new Params().fromJsonString(jsonString, options)
  }

  static equals(
    a: Params | PlainMessage<Params> | undefined,
    b: Params | PlainMessage<Params> | undefined,
  ): boolean {
    return proto3.util.equals(Params, a, b)
  }
}
