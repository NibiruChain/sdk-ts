// @generated by protoc-gen-es v1.2.1 with parameter "target=ts"
// @generated from file nibiru/spot/v1/params.proto (package nibiru.spot.v1, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type {
  BinaryReadOptions,
  FieldList,
  JsonReadOptions,
  JsonValue,
  PartialMessage,
  PlainMessage,
} from "@bufbuild/protobuf"
import { Message, proto3, protoInt64 } from "@bufbuild/protobuf"
import { Coin } from "../../../cosmos/base/v1beta1/coin_pb.js"

/**
 * Params defines the parameters for the module.
 *
 * @generated from message nibiru.spot.v1.Params
 */
export class Params extends Message<Params> {
  /**
   * The start pool number, i.e. the first pool number that isn't taken yet.
   *
   * @generated from field: uint64 starting_pool_number = 1;
   */
  startingPoolNumber = protoInt64.zero

  /**
   * The cost of creating a pool, taken from the pool creator's account.
   *
   * @generated from field: repeated cosmos.base.v1beta1.Coin pool_creation_fee = 2;
   */
  poolCreationFee: Coin[] = []

  /**
   * The assets that can be used to create liquidity pools
   *
   * @generated from field: repeated string whitelisted_asset = 3;
   */
  whitelistedAsset: string[] = []

  constructor(data?: PartialMessage<Params>) {
    super()
    proto3.util.initPartial(data, this)
  }

  static readonly runtime: typeof proto3 = proto3
  static readonly typeName = "nibiru.spot.v1.Params"
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    {
      no: 1,
      name: "starting_pool_number",
      kind: "scalar",
      T: 4 /* ScalarType.UINT64 */,
    },
    { no: 2, name: "pool_creation_fee", kind: "message", T: Coin, repeated: true },
    {
      no: 3,
      name: "whitelisted_asset",
      kind: "scalar",
      T: 9 /* ScalarType.STRING */,
      repeated: true,
    },
  ])

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Params {
    return new Params().fromBinary(bytes, options)
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Params {
    return new Params().fromJson(jsonValue, options)
  }

  static fromJsonString(
    jsonString: string,
    options?: Partial<JsonReadOptions>,
  ): Params {
    return new Params().fromJsonString(jsonString, options)
  }

  static equals(
    a: Params | PlainMessage<Params> | undefined,
    b: Params | PlainMessage<Params> | undefined,
  ): boolean {
    return proto3.util.equals(Params, a, b)
  }
}
