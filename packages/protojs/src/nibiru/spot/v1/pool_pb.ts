// @generated by protoc-gen-es v1.2.1 with parameter "target=ts"
// @generated from file nibiru/spot/v1/pool.proto (package nibiru.spot.v1, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type {
  BinaryReadOptions,
  FieldList,
  JsonReadOptions,
  JsonValue,
  PartialMessage,
  PlainMessage,
} from "@bufbuild/protobuf"
import { Message, proto3, protoInt64 } from "@bufbuild/protobuf"
import { Coin } from "../../../cosmos/base/v1beta1/coin_pb.js"

/**
 * - `balancer`: Balancer are pools defined by the equation xy=k, extended by
 * the weighs introduced by Balancer.
 * - `stableswap`: Stableswap pools are defined by a combination of
 * constant-product and constant-sum pool
 *
 * @generated from enum nibiru.spot.v1.PoolType
 */
export enum PoolType {
  /**
   * @generated from enum value: BALANCER = 0;
   */
  BALANCER = 0,

  /**
   * @generated from enum value: STABLESWAP = 1;
   */
  STABLESWAP = 1,
}
// Retrieve enum metadata with: proto3.getEnumType(PoolType)
proto3.util.setEnumType(PoolType, "nibiru.spot.v1.PoolType", [
  { no: 0, name: "BALANCER" },
  { no: 1, name: "STABLESWAP" },
])

/**
 * Configuration parameters for the pool.
 *
 * @generated from message nibiru.spot.v1.PoolParams
 */
export class PoolParams extends Message<PoolParams> {
  /**
   * @generated from field: string swap_fee = 1;
   */
  swapFee = ""

  /**
   * @generated from field: string exit_fee = 2;
   */
  exitFee = ""

  /**
   * Amplification Parameter (A): Larger value of A make the curve better
   * resemble a straight line in the center (when pool is near balance).  Highly
   * volatile assets should use a lower value, while assets that are closer
   * together may be best with a higher value. This is only used if the
   * pool_type is set to 1 (stableswap)
   *
   * @generated from field: string A = 3;
   */
  A = ""

  /**
   * @generated from field: nibiru.spot.v1.PoolType pool_type = 4;
   */
  poolType = PoolType.BALANCER

  constructor(data?: PartialMessage<PoolParams>) {
    super()
    proto3.util.initPartial(data, this)
  }

  static readonly runtime: typeof proto3 = proto3
  static readonly typeName = "nibiru.spot.v1.PoolParams"
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "swap_fee", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "exit_fee", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "A", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 4, name: "pool_type", kind: "enum", T: proto3.getEnumType(PoolType) },
  ])

  static fromBinary(
    bytes: Uint8Array,
    options?: Partial<BinaryReadOptions>,
  ): PoolParams {
    return new PoolParams().fromBinary(bytes, options)
  }

  static fromJson(
    jsonValue: JsonValue,
    options?: Partial<JsonReadOptions>,
  ): PoolParams {
    return new PoolParams().fromJson(jsonValue, options)
  }

  static fromJsonString(
    jsonString: string,
    options?: Partial<JsonReadOptions>,
  ): PoolParams {
    return new PoolParams().fromJsonString(jsonString, options)
  }

  static equals(
    a: PoolParams | PlainMessage<PoolParams> | undefined,
    b: PoolParams | PlainMessage<PoolParams> | undefined,
  ): boolean {
    return proto3.util.equals(PoolParams, a, b)
  }
}

/**
 * Which assets the pool contains.
 *
 * @generated from message nibiru.spot.v1.PoolAsset
 */
export class PoolAsset extends Message<PoolAsset> {
  /**
   * Coins we are talking about,
   * the denomination must be unique amongst all PoolAssets for this pool.
   *
   * @generated from field: cosmos.base.v1beta1.Coin token = 1;
   */
  token?: Coin

  /**
   * Weight that is not normalized. This weight must be less than 2^50
   *
   * @generated from field: string weight = 2;
   */
  weight = ""

  constructor(data?: PartialMessage<PoolAsset>) {
    super()
    proto3.util.initPartial(data, this)
  }

  static readonly runtime: typeof proto3 = proto3
  static readonly typeName = "nibiru.spot.v1.PoolAsset"
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "token", kind: "message", T: Coin },
    { no: 2, name: "weight", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ])

  static fromBinary(
    bytes: Uint8Array,
    options?: Partial<BinaryReadOptions>,
  ): PoolAsset {
    return new PoolAsset().fromBinary(bytes, options)
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): PoolAsset {
    return new PoolAsset().fromJson(jsonValue, options)
  }

  static fromJsonString(
    jsonString: string,
    options?: Partial<JsonReadOptions>,
  ): PoolAsset {
    return new PoolAsset().fromJsonString(jsonString, options)
  }

  static equals(
    a: PoolAsset | PlainMessage<PoolAsset> | undefined,
    b: PoolAsset | PlainMessage<PoolAsset> | undefined,
  ): boolean {
    return proto3.util.equals(PoolAsset, a, b)
  }
}

/**
 * @generated from message nibiru.spot.v1.Pool
 */
export class Pool extends Message<Pool> {
  /**
   * The pool id.
   *
   * @generated from field: uint64 id = 1;
   */
  id = protoInt64.zero

  /**
   * The pool account address.
   *
   * @generated from field: string address = 2;
   */
  address = ""

  /**
   * Fees and other pool-specific parameters.
   *
   * @generated from field: nibiru.spot.v1.PoolParams pool_params = 3;
   */
  poolParams?: PoolParams

  /**
   * These are assumed to be sorted by denomiation.
   * They contain the pool asset and the information about the weight
   *
   * @generated from field: repeated nibiru.spot.v1.PoolAsset pool_assets = 4;
   */
  poolAssets: PoolAsset[] = []

  /**
   * sum of all non-normalized pool weights
   *
   * @generated from field: string total_weight = 5;
   */
  totalWeight = ""

  /**
   * sum of all LP tokens sent out
   *
   * @generated from field: cosmos.base.v1beta1.Coin total_shares = 6;
   */
  totalShares?: Coin

  constructor(data?: PartialMessage<Pool>) {
    super()
    proto3.util.initPartial(data, this)
  }

  static readonly runtime: typeof proto3 = proto3
  static readonly typeName = "nibiru.spot.v1.Pool"
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "id", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 2, name: "address", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "pool_params", kind: "message", T: PoolParams },
    { no: 4, name: "pool_assets", kind: "message", T: PoolAsset, repeated: true },
    { no: 5, name: "total_weight", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 6, name: "total_shares", kind: "message", T: Coin },
  ])

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Pool {
    return new Pool().fromBinary(bytes, options)
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Pool {
    return new Pool().fromJson(jsonValue, options)
  }

  static fromJsonString(jsonString: string, options?: Partial<JsonReadOptions>): Pool {
    return new Pool().fromJsonString(jsonString, options)
  }

  static equals(
    a: Pool | PlainMessage<Pool> | undefined,
    b: Pool | PlainMessage<Pool> | undefined,
  ): boolean {
    return proto3.util.equals(Pool, a, b)
  }
}
