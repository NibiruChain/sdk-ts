// @generated by protoc-gen-es v1.2.1 with parameter "target=ts"
// @generated from file nibiru/spot/v1/tx.proto (package nibiru.spot.v1, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type {
  BinaryReadOptions,
  FieldList,
  JsonReadOptions,
  JsonValue,
  PartialMessage,
  PlainMessage,
} from "@bufbuild/protobuf"
import { Message, proto3, protoInt64 } from "@bufbuild/protobuf"
import { Pool, PoolAsset, PoolParams } from "./pool_pb.js"
import { Coin } from "../../../cosmos/base/v1beta1/coin_pb.js"

/**
 * @generated from message nibiru.spot.v1.MsgCreatePool
 */
export class MsgCreatePool extends Message<MsgCreatePool> {
  /**
   * @generated from field: string creator = 1;
   */
  creator = ""

  /**
   * @generated from field: nibiru.spot.v1.PoolParams pool_params = 2;
   */
  poolParams?: PoolParams

  /**
   * @generated from field: repeated nibiru.spot.v1.PoolAsset pool_assets = 3;
   */
  poolAssets: PoolAsset[] = []

  constructor(data?: PartialMessage<MsgCreatePool>) {
    super()
    proto3.util.initPartial(data, this)
  }

  static readonly runtime: typeof proto3 = proto3
  static readonly typeName = "nibiru.spot.v1.MsgCreatePool"
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "creator", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "pool_params", kind: "message", T: PoolParams },
    { no: 3, name: "pool_assets", kind: "message", T: PoolAsset, repeated: true },
  ])

  static fromBinary(
    bytes: Uint8Array,
    options?: Partial<BinaryReadOptions>,
  ): MsgCreatePool {
    return new MsgCreatePool().fromBinary(bytes, options)
  }

  static fromJson(
    jsonValue: JsonValue,
    options?: Partial<JsonReadOptions>,
  ): MsgCreatePool {
    return new MsgCreatePool().fromJson(jsonValue, options)
  }

  static fromJsonString(
    jsonString: string,
    options?: Partial<JsonReadOptions>,
  ): MsgCreatePool {
    return new MsgCreatePool().fromJsonString(jsonString, options)
  }

  static equals(
    a: MsgCreatePool | PlainMessage<MsgCreatePool> | undefined,
    b: MsgCreatePool | PlainMessage<MsgCreatePool> | undefined,
  ): boolean {
    return proto3.util.equals(MsgCreatePool, a, b)
  }
}

/**
 * @generated from message nibiru.spot.v1.MsgCreatePoolResponse
 */
export class MsgCreatePoolResponse extends Message<MsgCreatePoolResponse> {
  /**
   * @generated from field: uint64 pool_id = 1;
   */
  poolId = protoInt64.zero

  constructor(data?: PartialMessage<MsgCreatePoolResponse>) {
    super()
    proto3.util.initPartial(data, this)
  }

  static readonly runtime: typeof proto3 = proto3
  static readonly typeName = "nibiru.spot.v1.MsgCreatePoolResponse"
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "pool_id", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
  ])

  static fromBinary(
    bytes: Uint8Array,
    options?: Partial<BinaryReadOptions>,
  ): MsgCreatePoolResponse {
    return new MsgCreatePoolResponse().fromBinary(bytes, options)
  }

  static fromJson(
    jsonValue: JsonValue,
    options?: Partial<JsonReadOptions>,
  ): MsgCreatePoolResponse {
    return new MsgCreatePoolResponse().fromJson(jsonValue, options)
  }

  static fromJsonString(
    jsonString: string,
    options?: Partial<JsonReadOptions>,
  ): MsgCreatePoolResponse {
    return new MsgCreatePoolResponse().fromJsonString(jsonString, options)
  }

  static equals(
    a: MsgCreatePoolResponse | PlainMessage<MsgCreatePoolResponse> | undefined,
    b: MsgCreatePoolResponse | PlainMessage<MsgCreatePoolResponse> | undefined,
  ): boolean {
    return proto3.util.equals(MsgCreatePoolResponse, a, b)
  }
}

/**
 *
 * Message to join a pool (identified by poolId) with a set of tokens to deposit.
 *
 * @generated from message nibiru.spot.v1.MsgJoinPool
 */
export class MsgJoinPool extends Message<MsgJoinPool> {
  /**
   * @generated from field: string sender = 1;
   */
  sender = ""

  /**
   * @generated from field: uint64 pool_id = 2;
   */
  poolId = protoInt64.zero

  /**
   * @generated from field: repeated cosmos.base.v1beta1.Coin tokens_in = 3;
   */
  tokensIn: Coin[] = []

  /**
   * @generated from field: bool use_all_coins = 4;
   */
  useAllCoins = false

  constructor(data?: PartialMessage<MsgJoinPool>) {
    super()
    proto3.util.initPartial(data, this)
  }

  static readonly runtime: typeof proto3 = proto3
  static readonly typeName = "nibiru.spot.v1.MsgJoinPool"
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "sender", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "pool_id", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 3, name: "tokens_in", kind: "message", T: Coin, repeated: true },
    { no: 4, name: "use_all_coins", kind: "scalar", T: 8 /* ScalarType.BOOL */ },
  ])

  static fromBinary(
    bytes: Uint8Array,
    options?: Partial<BinaryReadOptions>,
  ): MsgJoinPool {
    return new MsgJoinPool().fromBinary(bytes, options)
  }

  static fromJson(
    jsonValue: JsonValue,
    options?: Partial<JsonReadOptions>,
  ): MsgJoinPool {
    return new MsgJoinPool().fromJson(jsonValue, options)
  }

  static fromJsonString(
    jsonString: string,
    options?: Partial<JsonReadOptions>,
  ): MsgJoinPool {
    return new MsgJoinPool().fromJsonString(jsonString, options)
  }

  static equals(
    a: MsgJoinPool | PlainMessage<MsgJoinPool> | undefined,
    b: MsgJoinPool | PlainMessage<MsgJoinPool> | undefined,
  ): boolean {
    return proto3.util.equals(MsgJoinPool, a, b)
  }
}

/**
 *
 * Response when a user joins a pool.
 *
 * @generated from message nibiru.spot.v1.MsgJoinPoolResponse
 */
export class MsgJoinPoolResponse extends Message<MsgJoinPoolResponse> {
  /**
   * the final state of the pool after a join
   *
   * @generated from field: nibiru.spot.v1.Pool pool = 1;
   */
  pool?: Pool

  /**
   * sum of LP tokens minted from the join
   *
   * @generated from field: cosmos.base.v1beta1.Coin num_pool_shares_out = 2;
   */
  numPoolSharesOut?: Coin

  /**
   * remaining tokens from attempting to join the pool
   *
   * @generated from field: repeated cosmos.base.v1beta1.Coin remaining_coins = 3;
   */
  remainingCoins: Coin[] = []

  constructor(data?: PartialMessage<MsgJoinPoolResponse>) {
    super()
    proto3.util.initPartial(data, this)
  }

  static readonly runtime: typeof proto3 = proto3
  static readonly typeName = "nibiru.spot.v1.MsgJoinPoolResponse"
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "pool", kind: "message", T: Pool },
    { no: 2, name: "num_pool_shares_out", kind: "message", T: Coin },
    { no: 3, name: "remaining_coins", kind: "message", T: Coin, repeated: true },
  ])

  static fromBinary(
    bytes: Uint8Array,
    options?: Partial<BinaryReadOptions>,
  ): MsgJoinPoolResponse {
    return new MsgJoinPoolResponse().fromBinary(bytes, options)
  }

  static fromJson(
    jsonValue: JsonValue,
    options?: Partial<JsonReadOptions>,
  ): MsgJoinPoolResponse {
    return new MsgJoinPoolResponse().fromJson(jsonValue, options)
  }

  static fromJsonString(
    jsonString: string,
    options?: Partial<JsonReadOptions>,
  ): MsgJoinPoolResponse {
    return new MsgJoinPoolResponse().fromJsonString(jsonString, options)
  }

  static equals(
    a: MsgJoinPoolResponse | PlainMessage<MsgJoinPoolResponse> | undefined,
    b: MsgJoinPoolResponse | PlainMessage<MsgJoinPoolResponse> | undefined,
  ): boolean {
    return proto3.util.equals(MsgJoinPoolResponse, a, b)
  }
}

/**
 * @generated from message nibiru.spot.v1.MsgExitPool
 */
export class MsgExitPool extends Message<MsgExitPool> {
  /**
   * @generated from field: string sender = 1;
   */
  sender = ""

  /**
   * @generated from field: uint64 pool_id = 2;
   */
  poolId = protoInt64.zero

  /**
   * @generated from field: cosmos.base.v1beta1.Coin pool_shares = 3;
   */
  poolShares?: Coin

  constructor(data?: PartialMessage<MsgExitPool>) {
    super()
    proto3.util.initPartial(data, this)
  }

  static readonly runtime: typeof proto3 = proto3
  static readonly typeName = "nibiru.spot.v1.MsgExitPool"
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "sender", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "pool_id", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 3, name: "pool_shares", kind: "message", T: Coin },
  ])

  static fromBinary(
    bytes: Uint8Array,
    options?: Partial<BinaryReadOptions>,
  ): MsgExitPool {
    return new MsgExitPool().fromBinary(bytes, options)
  }

  static fromJson(
    jsonValue: JsonValue,
    options?: Partial<JsonReadOptions>,
  ): MsgExitPool {
    return new MsgExitPool().fromJson(jsonValue, options)
  }

  static fromJsonString(
    jsonString: string,
    options?: Partial<JsonReadOptions>,
  ): MsgExitPool {
    return new MsgExitPool().fromJsonString(jsonString, options)
  }

  static equals(
    a: MsgExitPool | PlainMessage<MsgExitPool> | undefined,
    b: MsgExitPool | PlainMessage<MsgExitPool> | undefined,
  ): boolean {
    return proto3.util.equals(MsgExitPool, a, b)
  }
}

/**
 * @generated from message nibiru.spot.v1.MsgExitPoolResponse
 */
export class MsgExitPoolResponse extends Message<MsgExitPoolResponse> {
  /**
   * @generated from field: repeated cosmos.base.v1beta1.Coin tokens_out = 3;
   */
  tokensOut: Coin[] = []

  constructor(data?: PartialMessage<MsgExitPoolResponse>) {
    super()
    proto3.util.initPartial(data, this)
  }

  static readonly runtime: typeof proto3 = proto3
  static readonly typeName = "nibiru.spot.v1.MsgExitPoolResponse"
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 3, name: "tokens_out", kind: "message", T: Coin, repeated: true },
  ])

  static fromBinary(
    bytes: Uint8Array,
    options?: Partial<BinaryReadOptions>,
  ): MsgExitPoolResponse {
    return new MsgExitPoolResponse().fromBinary(bytes, options)
  }

  static fromJson(
    jsonValue: JsonValue,
    options?: Partial<JsonReadOptions>,
  ): MsgExitPoolResponse {
    return new MsgExitPoolResponse().fromJson(jsonValue, options)
  }

  static fromJsonString(
    jsonString: string,
    options?: Partial<JsonReadOptions>,
  ): MsgExitPoolResponse {
    return new MsgExitPoolResponse().fromJsonString(jsonString, options)
  }

  static equals(
    a: MsgExitPoolResponse | PlainMessage<MsgExitPoolResponse> | undefined,
    b: MsgExitPoolResponse | PlainMessage<MsgExitPoolResponse> | undefined,
  ): boolean {
    return proto3.util.equals(MsgExitPoolResponse, a, b)
  }
}

/**
 * @generated from message nibiru.spot.v1.MsgSwapAssets
 */
export class MsgSwapAssets extends Message<MsgSwapAssets> {
  /**
   * @generated from field: string sender = 1;
   */
  sender = ""

  /**
   * @generated from field: uint64 pool_id = 2;
   */
  poolId = protoInt64.zero

  /**
   * @generated from field: cosmos.base.v1beta1.Coin token_in = 3;
   */
  tokenIn?: Coin

  /**
   * @generated from field: string token_out_denom = 4;
   */
  tokenOutDenom = ""

  constructor(data?: PartialMessage<MsgSwapAssets>) {
    super()
    proto3.util.initPartial(data, this)
  }

  static readonly runtime: typeof proto3 = proto3
  static readonly typeName = "nibiru.spot.v1.MsgSwapAssets"
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "sender", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "pool_id", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 3, name: "token_in", kind: "message", T: Coin },
    { no: 4, name: "token_out_denom", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ])

  static fromBinary(
    bytes: Uint8Array,
    options?: Partial<BinaryReadOptions>,
  ): MsgSwapAssets {
    return new MsgSwapAssets().fromBinary(bytes, options)
  }

  static fromJson(
    jsonValue: JsonValue,
    options?: Partial<JsonReadOptions>,
  ): MsgSwapAssets {
    return new MsgSwapAssets().fromJson(jsonValue, options)
  }

  static fromJsonString(
    jsonString: string,
    options?: Partial<JsonReadOptions>,
  ): MsgSwapAssets {
    return new MsgSwapAssets().fromJsonString(jsonString, options)
  }

  static equals(
    a: MsgSwapAssets | PlainMessage<MsgSwapAssets> | undefined,
    b: MsgSwapAssets | PlainMessage<MsgSwapAssets> | undefined,
  ): boolean {
    return proto3.util.equals(MsgSwapAssets, a, b)
  }
}

/**
 * @generated from message nibiru.spot.v1.MsgSwapAssetsResponse
 */
export class MsgSwapAssetsResponse extends Message<MsgSwapAssetsResponse> {
  /**
   * @generated from field: cosmos.base.v1beta1.Coin token_out = 3;
   */
  tokenOut?: Coin

  constructor(data?: PartialMessage<MsgSwapAssetsResponse>) {
    super()
    proto3.util.initPartial(data, this)
  }

  static readonly runtime: typeof proto3 = proto3
  static readonly typeName = "nibiru.spot.v1.MsgSwapAssetsResponse"
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 3, name: "token_out", kind: "message", T: Coin },
  ])

  static fromBinary(
    bytes: Uint8Array,
    options?: Partial<BinaryReadOptions>,
  ): MsgSwapAssetsResponse {
    return new MsgSwapAssetsResponse().fromBinary(bytes, options)
  }

  static fromJson(
    jsonValue: JsonValue,
    options?: Partial<JsonReadOptions>,
  ): MsgSwapAssetsResponse {
    return new MsgSwapAssetsResponse().fromJson(jsonValue, options)
  }

  static fromJsonString(
    jsonString: string,
    options?: Partial<JsonReadOptions>,
  ): MsgSwapAssetsResponse {
    return new MsgSwapAssetsResponse().fromJsonString(jsonString, options)
  }

  static equals(
    a: MsgSwapAssetsResponse | PlainMessage<MsgSwapAssetsResponse> | undefined,
    b: MsgSwapAssetsResponse | PlainMessage<MsgSwapAssetsResponse> | undefined,
  ): boolean {
    return proto3.util.equals(MsgSwapAssetsResponse, a, b)
  }
}
