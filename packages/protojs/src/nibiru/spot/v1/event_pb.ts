// @generated by protoc-gen-es v1.2.1 with parameter "target=ts"
// @generated from file nibiru/spot/v1/event.proto (package nibiru.spot.v1, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type {
  BinaryReadOptions,
  FieldList,
  JsonReadOptions,
  JsonValue,
  PartialMessage,
  PlainMessage,
} from "@bufbuild/protobuf"
import { Message, proto3 } from "@bufbuild/protobuf"
import { Coin } from "../../../cosmos/base/v1beta1/coin_pb.js"
import { Pool } from "./pool_pb.js"

/**
 * @generated from message nibiru.spot.v1.EventPoolCreated
 */
export class EventPoolCreated extends Message<EventPoolCreated> {
  /**
   * the address of the user who created the pool
   *
   * @generated from field: string creator = 1;
   */
  creator = ""

  /**
   * the create pool fee
   *
   * @generated from field: repeated cosmos.base.v1beta1.Coin fees = 2;
   */
  fees: Coin[] = []

  /**
   * the final state of the pool
   *
   * @generated from field: nibiru.spot.v1.Pool final_pool = 4;
   */
  finalPool?: Pool

  /**
   * the amount of pool shares that the user received
   *
   * @generated from field: cosmos.base.v1beta1.Coin final_user_pool_shares = 5;
   */
  finalUserPoolShares?: Coin

  constructor(data?: PartialMessage<EventPoolCreated>) {
    super()
    proto3.util.initPartial(data, this)
  }

  static readonly runtime: typeof proto3 = proto3
  static readonly typeName = "nibiru.spot.v1.EventPoolCreated"
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "creator", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "fees", kind: "message", T: Coin, repeated: true },
    { no: 4, name: "final_pool", kind: "message", T: Pool },
    { no: 5, name: "final_user_pool_shares", kind: "message", T: Coin },
  ])

  static fromBinary(
    bytes: Uint8Array,
    options?: Partial<BinaryReadOptions>,
  ): EventPoolCreated {
    return new EventPoolCreated().fromBinary(bytes, options)
  }

  static fromJson(
    jsonValue: JsonValue,
    options?: Partial<JsonReadOptions>,
  ): EventPoolCreated {
    return new EventPoolCreated().fromJson(jsonValue, options)
  }

  static fromJsonString(
    jsonString: string,
    options?: Partial<JsonReadOptions>,
  ): EventPoolCreated {
    return new EventPoolCreated().fromJsonString(jsonString, options)
  }

  static equals(
    a: EventPoolCreated | PlainMessage<EventPoolCreated> | undefined,
    b: EventPoolCreated | PlainMessage<EventPoolCreated> | undefined,
  ): boolean {
    return proto3.util.equals(EventPoolCreated, a, b)
  }
}

/**
 * @generated from message nibiru.spot.v1.EventPoolJoined
 */
export class EventPoolJoined extends Message<EventPoolJoined> {
  /**
   * the address of the user who joined the pool
   *
   * @generated from field: string address = 1;
   */
  address = ""

  /**
   * the amount of tokens that the user deposited
   *
   * @generated from field: repeated cosmos.base.v1beta1.Coin tokens_in = 2;
   */
  tokensIn: Coin[] = []

  /**
   * the amount of pool shares that the user received
   *
   * @generated from field: cosmos.base.v1beta1.Coin pool_shares_out = 3;
   */
  poolSharesOut?: Coin

  /**
   * the amount of tokens remaining for the user
   *
   * @generated from field: repeated cosmos.base.v1beta1.Coin rem_coins = 4;
   */
  remCoins: Coin[] = []

  /**
   * the final state of the pool
   *
   * @generated from field: nibiru.spot.v1.Pool final_pool = 5;
   */
  finalPool?: Pool

  /**
   * the final amount of user pool shares
   *
   * @generated from field: cosmos.base.v1beta1.Coin final_user_pool_shares = 6;
   */
  finalUserPoolShares?: Coin

  constructor(data?: PartialMessage<EventPoolJoined>) {
    super()
    proto3.util.initPartial(data, this)
  }

  static readonly runtime: typeof proto3 = proto3
  static readonly typeName = "nibiru.spot.v1.EventPoolJoined"
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "address", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "tokens_in", kind: "message", T: Coin, repeated: true },
    { no: 3, name: "pool_shares_out", kind: "message", T: Coin },
    { no: 4, name: "rem_coins", kind: "message", T: Coin, repeated: true },
    { no: 5, name: "final_pool", kind: "message", T: Pool },
    { no: 6, name: "final_user_pool_shares", kind: "message", T: Coin },
  ])

  static fromBinary(
    bytes: Uint8Array,
    options?: Partial<BinaryReadOptions>,
  ): EventPoolJoined {
    return new EventPoolJoined().fromBinary(bytes, options)
  }

  static fromJson(
    jsonValue: JsonValue,
    options?: Partial<JsonReadOptions>,
  ): EventPoolJoined {
    return new EventPoolJoined().fromJson(jsonValue, options)
  }

  static fromJsonString(
    jsonString: string,
    options?: Partial<JsonReadOptions>,
  ): EventPoolJoined {
    return new EventPoolJoined().fromJsonString(jsonString, options)
  }

  static equals(
    a: EventPoolJoined | PlainMessage<EventPoolJoined> | undefined,
    b: EventPoolJoined | PlainMessage<EventPoolJoined> | undefined,
  ): boolean {
    return proto3.util.equals(EventPoolJoined, a, b)
  }
}

/**
 * @generated from message nibiru.spot.v1.EventPoolExited
 */
export class EventPoolExited extends Message<EventPoolExited> {
  /**
   * the address of the user who exited the pool
   *
   * @generated from field: string address = 1;
   */
  address = ""

  /**
   * the amount of pool shares that the user exited with
   *
   * @generated from field: cosmos.base.v1beta1.Coin pool_shares_in = 2;
   */
  poolSharesIn?: Coin

  /**
   * the amount of tokens returned to the user
   *
   * @generated from field: repeated cosmos.base.v1beta1.Coin tokens_out = 3;
   */
  tokensOut: Coin[] = []

  /**
   * the amount of fees collected by the pool
   *
   * @generated from field: repeated cosmos.base.v1beta1.Coin fees = 4;
   */
  fees: Coin[] = []

  /**
   * the final state of the pool
   *
   * @generated from field: nibiru.spot.v1.Pool final_pool = 5;
   */
  finalPool?: Pool

  /**
   * the final amount of user pool shares
   *
   * @generated from field: cosmos.base.v1beta1.Coin final_user_pool_shares = 6;
   */
  finalUserPoolShares?: Coin

  constructor(data?: PartialMessage<EventPoolExited>) {
    super()
    proto3.util.initPartial(data, this)
  }

  static readonly runtime: typeof proto3 = proto3
  static readonly typeName = "nibiru.spot.v1.EventPoolExited"
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "address", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "pool_shares_in", kind: "message", T: Coin },
    { no: 3, name: "tokens_out", kind: "message", T: Coin, repeated: true },
    { no: 4, name: "fees", kind: "message", T: Coin, repeated: true },
    { no: 5, name: "final_pool", kind: "message", T: Pool },
    { no: 6, name: "final_user_pool_shares", kind: "message", T: Coin },
  ])

  static fromBinary(
    bytes: Uint8Array,
    options?: Partial<BinaryReadOptions>,
  ): EventPoolExited {
    return new EventPoolExited().fromBinary(bytes, options)
  }

  static fromJson(
    jsonValue: JsonValue,
    options?: Partial<JsonReadOptions>,
  ): EventPoolExited {
    return new EventPoolExited().fromJson(jsonValue, options)
  }

  static fromJsonString(
    jsonString: string,
    options?: Partial<JsonReadOptions>,
  ): EventPoolExited {
    return new EventPoolExited().fromJsonString(jsonString, options)
  }

  static equals(
    a: EventPoolExited | PlainMessage<EventPoolExited> | undefined,
    b: EventPoolExited | PlainMessage<EventPoolExited> | undefined,
  ): boolean {
    return proto3.util.equals(EventPoolExited, a, b)
  }
}

/**
 * @generated from message nibiru.spot.v1.EventAssetsSwapped
 */
export class EventAssetsSwapped extends Message<EventAssetsSwapped> {
  /**
   * the address of the user who swapped tokens
   *
   * @generated from field: string address = 1;
   */
  address = ""

  /**
   * the amount of tokens that the user deposited
   *
   * @generated from field: cosmos.base.v1beta1.Coin token_in = 2;
   */
  tokenIn?: Coin

  /**
   * the amount of tokens that the user received
   *
   * @generated from field: cosmos.base.v1beta1.Coin token_out = 3;
   */
  tokenOut?: Coin

  /**
   * the amount of fees collected by the pool
   *
   * @generated from field: cosmos.base.v1beta1.Coin fee = 4;
   */
  fee?: Coin

  /**
   * the final state of the pool
   *
   * @generated from field: nibiru.spot.v1.Pool final_pool = 5;
   */
  finalPool?: Pool

  constructor(data?: PartialMessage<EventAssetsSwapped>) {
    super()
    proto3.util.initPartial(data, this)
  }

  static readonly runtime: typeof proto3 = proto3
  static readonly typeName = "nibiru.spot.v1.EventAssetsSwapped"
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "address", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "token_in", kind: "message", T: Coin },
    { no: 3, name: "token_out", kind: "message", T: Coin },
    { no: 4, name: "fee", kind: "message", T: Coin },
    { no: 5, name: "final_pool", kind: "message", T: Pool },
  ])

  static fromBinary(
    bytes: Uint8Array,
    options?: Partial<BinaryReadOptions>,
  ): EventAssetsSwapped {
    return new EventAssetsSwapped().fromBinary(bytes, options)
  }

  static fromJson(
    jsonValue: JsonValue,
    options?: Partial<JsonReadOptions>,
  ): EventAssetsSwapped {
    return new EventAssetsSwapped().fromJson(jsonValue, options)
  }

  static fromJsonString(
    jsonString: string,
    options?: Partial<JsonReadOptions>,
  ): EventAssetsSwapped {
    return new EventAssetsSwapped().fromJsonString(jsonString, options)
  }

  static equals(
    a: EventAssetsSwapped | PlainMessage<EventAssetsSwapped> | undefined,
    b: EventAssetsSwapped | PlainMessage<EventAssetsSwapped> | undefined,
  ): boolean {
    return proto3.util.equals(EventAssetsSwapped, a, b)
  }
}
