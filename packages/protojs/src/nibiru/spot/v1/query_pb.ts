// @generated by protoc-gen-es v1.2.1 with parameter "target=ts"
// @generated from file nibiru/spot/v1/query.proto (package nibiru.spot.v1, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type {
  BinaryReadOptions,
  FieldList,
  JsonReadOptions,
  JsonValue,
  PartialMessage,
  PlainMessage,
} from "@bufbuild/protobuf"
import { Message, proto3, protoInt64 } from "@bufbuild/protobuf"
import { Params } from "./params_pb.js"
import { Pool, PoolParams } from "./pool_pb.js"
import {
  PageRequest,
  PageResponse,
} from "../../../cosmos/base/query/v1beta1/pagination_pb.js"
import { Coin } from "../../../cosmos/base/v1beta1/coin_pb.js"

/**
 * QueryParamsRequest is request type for the Query/Params RPC method.
 *
 * @generated from message nibiru.spot.v1.QueryParamsRequest
 */
export class QueryParamsRequest extends Message<QueryParamsRequest> {
  constructor(data?: PartialMessage<QueryParamsRequest>) {
    super()
    proto3.util.initPartial(data, this)
  }

  static readonly runtime: typeof proto3 = proto3
  static readonly typeName = "nibiru.spot.v1.QueryParamsRequest"
  static readonly fields: FieldList = proto3.util.newFieldList(() => [])

  static fromBinary(
    bytes: Uint8Array,
    options?: Partial<BinaryReadOptions>,
  ): QueryParamsRequest {
    return new QueryParamsRequest().fromBinary(bytes, options)
  }

  static fromJson(
    jsonValue: JsonValue,
    options?: Partial<JsonReadOptions>,
  ): QueryParamsRequest {
    return new QueryParamsRequest().fromJson(jsonValue, options)
  }

  static fromJsonString(
    jsonString: string,
    options?: Partial<JsonReadOptions>,
  ): QueryParamsRequest {
    return new QueryParamsRequest().fromJsonString(jsonString, options)
  }

  static equals(
    a: QueryParamsRequest | PlainMessage<QueryParamsRequest> | undefined,
    b: QueryParamsRequest | PlainMessage<QueryParamsRequest> | undefined,
  ): boolean {
    return proto3.util.equals(QueryParamsRequest, a, b)
  }
}

/**
 * QueryParamsResponse is response type for the Query/Params RPC method.
 *
 * @generated from message nibiru.spot.v1.QueryParamsResponse
 */
export class QueryParamsResponse extends Message<QueryParamsResponse> {
  /**
   * params holds all the parameters of this module.
   *
   * @generated from field: nibiru.spot.v1.Params params = 1;
   */
  params?: Params

  constructor(data?: PartialMessage<QueryParamsResponse>) {
    super()
    proto3.util.initPartial(data, this)
  }

  static readonly runtime: typeof proto3 = proto3
  static readonly typeName = "nibiru.spot.v1.QueryParamsResponse"
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "params", kind: "message", T: Params },
  ])

  static fromBinary(
    bytes: Uint8Array,
    options?: Partial<BinaryReadOptions>,
  ): QueryParamsResponse {
    return new QueryParamsResponse().fromBinary(bytes, options)
  }

  static fromJson(
    jsonValue: JsonValue,
    options?: Partial<JsonReadOptions>,
  ): QueryParamsResponse {
    return new QueryParamsResponse().fromJson(jsonValue, options)
  }

  static fromJsonString(
    jsonString: string,
    options?: Partial<JsonReadOptions>,
  ): QueryParamsResponse {
    return new QueryParamsResponse().fromJsonString(jsonString, options)
  }

  static equals(
    a: QueryParamsResponse | PlainMessage<QueryParamsResponse> | undefined,
    b: QueryParamsResponse | PlainMessage<QueryParamsResponse> | undefined,
  ): boolean {
    return proto3.util.equals(QueryParamsResponse, a, b)
  }
}

/**
 * @generated from message nibiru.spot.v1.QueryPoolNumberRequest
 */
export class QueryPoolNumberRequest extends Message<QueryPoolNumberRequest> {
  constructor(data?: PartialMessage<QueryPoolNumberRequest>) {
    super()
    proto3.util.initPartial(data, this)
  }

  static readonly runtime: typeof proto3 = proto3
  static readonly typeName = "nibiru.spot.v1.QueryPoolNumberRequest"
  static readonly fields: FieldList = proto3.util.newFieldList(() => [])

  static fromBinary(
    bytes: Uint8Array,
    options?: Partial<BinaryReadOptions>,
  ): QueryPoolNumberRequest {
    return new QueryPoolNumberRequest().fromBinary(bytes, options)
  }

  static fromJson(
    jsonValue: JsonValue,
    options?: Partial<JsonReadOptions>,
  ): QueryPoolNumberRequest {
    return new QueryPoolNumberRequest().fromJson(jsonValue, options)
  }

  static fromJsonString(
    jsonString: string,
    options?: Partial<JsonReadOptions>,
  ): QueryPoolNumberRequest {
    return new QueryPoolNumberRequest().fromJsonString(jsonString, options)
  }

  static equals(
    a: QueryPoolNumberRequest | PlainMessage<QueryPoolNumberRequest> | undefined,
    b: QueryPoolNumberRequest | PlainMessage<QueryPoolNumberRequest> | undefined,
  ): boolean {
    return proto3.util.equals(QueryPoolNumberRequest, a, b)
  }
}

/**
 * @generated from message nibiru.spot.v1.QueryPoolNumberResponse
 */
export class QueryPoolNumberResponse extends Message<QueryPoolNumberResponse> {
  /**
   * @generated from field: uint64 pool_id = 1;
   */
  poolId = protoInt64.zero

  constructor(data?: PartialMessage<QueryPoolNumberResponse>) {
    super()
    proto3.util.initPartial(data, this)
  }

  static readonly runtime: typeof proto3 = proto3
  static readonly typeName = "nibiru.spot.v1.QueryPoolNumberResponse"
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "pool_id", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
  ])

  static fromBinary(
    bytes: Uint8Array,
    options?: Partial<BinaryReadOptions>,
  ): QueryPoolNumberResponse {
    return new QueryPoolNumberResponse().fromBinary(bytes, options)
  }

  static fromJson(
    jsonValue: JsonValue,
    options?: Partial<JsonReadOptions>,
  ): QueryPoolNumberResponse {
    return new QueryPoolNumberResponse().fromJson(jsonValue, options)
  }

  static fromJsonString(
    jsonString: string,
    options?: Partial<JsonReadOptions>,
  ): QueryPoolNumberResponse {
    return new QueryPoolNumberResponse().fromJsonString(jsonString, options)
  }

  static equals(
    a: QueryPoolNumberResponse | PlainMessage<QueryPoolNumberResponse> | undefined,
    b: QueryPoolNumberResponse | PlainMessage<QueryPoolNumberResponse> | undefined,
  ): boolean {
    return proto3.util.equals(QueryPoolNumberResponse, a, b)
  }
}

/**
 * @generated from message nibiru.spot.v1.QueryPoolRequest
 */
export class QueryPoolRequest extends Message<QueryPoolRequest> {
  /**
   * @generated from field: uint64 pool_id = 1;
   */
  poolId = protoInt64.zero

  constructor(data?: PartialMessage<QueryPoolRequest>) {
    super()
    proto3.util.initPartial(data, this)
  }

  static readonly runtime: typeof proto3 = proto3
  static readonly typeName = "nibiru.spot.v1.QueryPoolRequest"
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "pool_id", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
  ])

  static fromBinary(
    bytes: Uint8Array,
    options?: Partial<BinaryReadOptions>,
  ): QueryPoolRequest {
    return new QueryPoolRequest().fromBinary(bytes, options)
  }

  static fromJson(
    jsonValue: JsonValue,
    options?: Partial<JsonReadOptions>,
  ): QueryPoolRequest {
    return new QueryPoolRequest().fromJson(jsonValue, options)
  }

  static fromJsonString(
    jsonString: string,
    options?: Partial<JsonReadOptions>,
  ): QueryPoolRequest {
    return new QueryPoolRequest().fromJsonString(jsonString, options)
  }

  static equals(
    a: QueryPoolRequest | PlainMessage<QueryPoolRequest> | undefined,
    b: QueryPoolRequest | PlainMessage<QueryPoolRequest> | undefined,
  ): boolean {
    return proto3.util.equals(QueryPoolRequest, a, b)
  }
}

/**
 * @generated from message nibiru.spot.v1.QueryPoolResponse
 */
export class QueryPoolResponse extends Message<QueryPoolResponse> {
  /**
   * @generated from field: nibiru.spot.v1.Pool pool = 1;
   */
  pool?: Pool

  constructor(data?: PartialMessage<QueryPoolResponse>) {
    super()
    proto3.util.initPartial(data, this)
  }

  static readonly runtime: typeof proto3 = proto3
  static readonly typeName = "nibiru.spot.v1.QueryPoolResponse"
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "pool", kind: "message", T: Pool },
  ])

  static fromBinary(
    bytes: Uint8Array,
    options?: Partial<BinaryReadOptions>,
  ): QueryPoolResponse {
    return new QueryPoolResponse().fromBinary(bytes, options)
  }

  static fromJson(
    jsonValue: JsonValue,
    options?: Partial<JsonReadOptions>,
  ): QueryPoolResponse {
    return new QueryPoolResponse().fromJson(jsonValue, options)
  }

  static fromJsonString(
    jsonString: string,
    options?: Partial<JsonReadOptions>,
  ): QueryPoolResponse {
    return new QueryPoolResponse().fromJsonString(jsonString, options)
  }

  static equals(
    a: QueryPoolResponse | PlainMessage<QueryPoolResponse> | undefined,
    b: QueryPoolResponse | PlainMessage<QueryPoolResponse> | undefined,
  ): boolean {
    return proto3.util.equals(QueryPoolResponse, a, b)
  }
}

/**
 * @generated from message nibiru.spot.v1.QueryPoolsRequest
 */
export class QueryPoolsRequest extends Message<QueryPoolsRequest> {
  /**
   * pagination defines an optional pagination for the request.
   *
   * @generated from field: cosmos.base.query.v1beta1.PageRequest pagination = 1;
   */
  pagination?: PageRequest

  constructor(data?: PartialMessage<QueryPoolsRequest>) {
    super()
    proto3.util.initPartial(data, this)
  }

  static readonly runtime: typeof proto3 = proto3
  static readonly typeName = "nibiru.spot.v1.QueryPoolsRequest"
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "pagination", kind: "message", T: PageRequest },
  ])

  static fromBinary(
    bytes: Uint8Array,
    options?: Partial<BinaryReadOptions>,
  ): QueryPoolsRequest {
    return new QueryPoolsRequest().fromBinary(bytes, options)
  }

  static fromJson(
    jsonValue: JsonValue,
    options?: Partial<JsonReadOptions>,
  ): QueryPoolsRequest {
    return new QueryPoolsRequest().fromJson(jsonValue, options)
  }

  static fromJsonString(
    jsonString: string,
    options?: Partial<JsonReadOptions>,
  ): QueryPoolsRequest {
    return new QueryPoolsRequest().fromJsonString(jsonString, options)
  }

  static equals(
    a: QueryPoolsRequest | PlainMessage<QueryPoolsRequest> | undefined,
    b: QueryPoolsRequest | PlainMessage<QueryPoolsRequest> | undefined,
  ): boolean {
    return proto3.util.equals(QueryPoolsRequest, a, b)
  }
}

/**
 * @generated from message nibiru.spot.v1.QueryPoolsResponse
 */
export class QueryPoolsResponse extends Message<QueryPoolsResponse> {
  /**
   * @generated from field: repeated nibiru.spot.v1.Pool pools = 1;
   */
  pools: Pool[] = []

  /**
   * pagination defines the pagination in the response.
   *
   * @generated from field: cosmos.base.query.v1beta1.PageResponse pagination = 2;
   */
  pagination?: PageResponse

  constructor(data?: PartialMessage<QueryPoolsResponse>) {
    super()
    proto3.util.initPartial(data, this)
  }

  static readonly runtime: typeof proto3 = proto3
  static readonly typeName = "nibiru.spot.v1.QueryPoolsResponse"
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "pools", kind: "message", T: Pool, repeated: true },
    { no: 2, name: "pagination", kind: "message", T: PageResponse },
  ])

  static fromBinary(
    bytes: Uint8Array,
    options?: Partial<BinaryReadOptions>,
  ): QueryPoolsResponse {
    return new QueryPoolsResponse().fromBinary(bytes, options)
  }

  static fromJson(
    jsonValue: JsonValue,
    options?: Partial<JsonReadOptions>,
  ): QueryPoolsResponse {
    return new QueryPoolsResponse().fromJson(jsonValue, options)
  }

  static fromJsonString(
    jsonString: string,
    options?: Partial<JsonReadOptions>,
  ): QueryPoolsResponse {
    return new QueryPoolsResponse().fromJsonString(jsonString, options)
  }

  static equals(
    a: QueryPoolsResponse | PlainMessage<QueryPoolsResponse> | undefined,
    b: QueryPoolsResponse | PlainMessage<QueryPoolsResponse> | undefined,
  ): boolean {
    return proto3.util.equals(QueryPoolsResponse, a, b)
  }
}

/**
 * @generated from message nibiru.spot.v1.QueryPoolParamsRequest
 */
export class QueryPoolParamsRequest extends Message<QueryPoolParamsRequest> {
  /**
   * @generated from field: uint64 pool_id = 1;
   */
  poolId = protoInt64.zero

  constructor(data?: PartialMessage<QueryPoolParamsRequest>) {
    super()
    proto3.util.initPartial(data, this)
  }

  static readonly runtime: typeof proto3 = proto3
  static readonly typeName = "nibiru.spot.v1.QueryPoolParamsRequest"
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "pool_id", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
  ])

  static fromBinary(
    bytes: Uint8Array,
    options?: Partial<BinaryReadOptions>,
  ): QueryPoolParamsRequest {
    return new QueryPoolParamsRequest().fromBinary(bytes, options)
  }

  static fromJson(
    jsonValue: JsonValue,
    options?: Partial<JsonReadOptions>,
  ): QueryPoolParamsRequest {
    return new QueryPoolParamsRequest().fromJson(jsonValue, options)
  }

  static fromJsonString(
    jsonString: string,
    options?: Partial<JsonReadOptions>,
  ): QueryPoolParamsRequest {
    return new QueryPoolParamsRequest().fromJsonString(jsonString, options)
  }

  static equals(
    a: QueryPoolParamsRequest | PlainMessage<QueryPoolParamsRequest> | undefined,
    b: QueryPoolParamsRequest | PlainMessage<QueryPoolParamsRequest> | undefined,
  ): boolean {
    return proto3.util.equals(QueryPoolParamsRequest, a, b)
  }
}

/**
 * @generated from message nibiru.spot.v1.QueryPoolParamsResponse
 */
export class QueryPoolParamsResponse extends Message<QueryPoolParamsResponse> {
  /**
   * @generated from field: nibiru.spot.v1.PoolParams pool_params = 1;
   */
  poolParams?: PoolParams

  constructor(data?: PartialMessage<QueryPoolParamsResponse>) {
    super()
    proto3.util.initPartial(data, this)
  }

  static readonly runtime: typeof proto3 = proto3
  static readonly typeName = "nibiru.spot.v1.QueryPoolParamsResponse"
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "pool_params", kind: "message", T: PoolParams },
  ])

  static fromBinary(
    bytes: Uint8Array,
    options?: Partial<BinaryReadOptions>,
  ): QueryPoolParamsResponse {
    return new QueryPoolParamsResponse().fromBinary(bytes, options)
  }

  static fromJson(
    jsonValue: JsonValue,
    options?: Partial<JsonReadOptions>,
  ): QueryPoolParamsResponse {
    return new QueryPoolParamsResponse().fromJson(jsonValue, options)
  }

  static fromJsonString(
    jsonString: string,
    options?: Partial<JsonReadOptions>,
  ): QueryPoolParamsResponse {
    return new QueryPoolParamsResponse().fromJsonString(jsonString, options)
  }

  static equals(
    a: QueryPoolParamsResponse | PlainMessage<QueryPoolParamsResponse> | undefined,
    b: QueryPoolParamsResponse | PlainMessage<QueryPoolParamsResponse> | undefined,
  ): boolean {
    return proto3.util.equals(QueryPoolParamsResponse, a, b)
  }
}

/**
 * @generated from message nibiru.spot.v1.QueryNumPoolsRequest
 */
export class QueryNumPoolsRequest extends Message<QueryNumPoolsRequest> {
  constructor(data?: PartialMessage<QueryNumPoolsRequest>) {
    super()
    proto3.util.initPartial(data, this)
  }

  static readonly runtime: typeof proto3 = proto3
  static readonly typeName = "nibiru.spot.v1.QueryNumPoolsRequest"
  static readonly fields: FieldList = proto3.util.newFieldList(() => [])

  static fromBinary(
    bytes: Uint8Array,
    options?: Partial<BinaryReadOptions>,
  ): QueryNumPoolsRequest {
    return new QueryNumPoolsRequest().fromBinary(bytes, options)
  }

  static fromJson(
    jsonValue: JsonValue,
    options?: Partial<JsonReadOptions>,
  ): QueryNumPoolsRequest {
    return new QueryNumPoolsRequest().fromJson(jsonValue, options)
  }

  static fromJsonString(
    jsonString: string,
    options?: Partial<JsonReadOptions>,
  ): QueryNumPoolsRequest {
    return new QueryNumPoolsRequest().fromJsonString(jsonString, options)
  }

  static equals(
    a: QueryNumPoolsRequest | PlainMessage<QueryNumPoolsRequest> | undefined,
    b: QueryNumPoolsRequest | PlainMessage<QueryNumPoolsRequest> | undefined,
  ): boolean {
    return proto3.util.equals(QueryNumPoolsRequest, a, b)
  }
}

/**
 * @generated from message nibiru.spot.v1.QueryNumPoolsResponse
 */
export class QueryNumPoolsResponse extends Message<QueryNumPoolsResponse> {
  /**
   * @generated from field: uint64 num_pools = 1;
   */
  numPools = protoInt64.zero

  constructor(data?: PartialMessage<QueryNumPoolsResponse>) {
    super()
    proto3.util.initPartial(data, this)
  }

  static readonly runtime: typeof proto3 = proto3
  static readonly typeName = "nibiru.spot.v1.QueryNumPoolsResponse"
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "num_pools", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
  ])

  static fromBinary(
    bytes: Uint8Array,
    options?: Partial<BinaryReadOptions>,
  ): QueryNumPoolsResponse {
    return new QueryNumPoolsResponse().fromBinary(bytes, options)
  }

  static fromJson(
    jsonValue: JsonValue,
    options?: Partial<JsonReadOptions>,
  ): QueryNumPoolsResponse {
    return new QueryNumPoolsResponse().fromJson(jsonValue, options)
  }

  static fromJsonString(
    jsonString: string,
    options?: Partial<JsonReadOptions>,
  ): QueryNumPoolsResponse {
    return new QueryNumPoolsResponse().fromJsonString(jsonString, options)
  }

  static equals(
    a: QueryNumPoolsResponse | PlainMessage<QueryNumPoolsResponse> | undefined,
    b: QueryNumPoolsResponse | PlainMessage<QueryNumPoolsResponse> | undefined,
  ): boolean {
    return proto3.util.equals(QueryNumPoolsResponse, a, b)
  }
}

/**
 * --------------------------------------------
 * Query total liquidity the protocol
 *
 * @generated from message nibiru.spot.v1.QueryTotalLiquidityRequest
 */
export class QueryTotalLiquidityRequest extends Message<QueryTotalLiquidityRequest> {
  constructor(data?: PartialMessage<QueryTotalLiquidityRequest>) {
    super()
    proto3.util.initPartial(data, this)
  }

  static readonly runtime: typeof proto3 = proto3
  static readonly typeName = "nibiru.spot.v1.QueryTotalLiquidityRequest"
  static readonly fields: FieldList = proto3.util.newFieldList(() => [])

  static fromBinary(
    bytes: Uint8Array,
    options?: Partial<BinaryReadOptions>,
  ): QueryTotalLiquidityRequest {
    return new QueryTotalLiquidityRequest().fromBinary(bytes, options)
  }

  static fromJson(
    jsonValue: JsonValue,
    options?: Partial<JsonReadOptions>,
  ): QueryTotalLiquidityRequest {
    return new QueryTotalLiquidityRequest().fromJson(jsonValue, options)
  }

  static fromJsonString(
    jsonString: string,
    options?: Partial<JsonReadOptions>,
  ): QueryTotalLiquidityRequest {
    return new QueryTotalLiquidityRequest().fromJsonString(jsonString, options)
  }

  static equals(
    a:
      | QueryTotalLiquidityRequest
      | PlainMessage<QueryTotalLiquidityRequest>
      | undefined,
    b:
      | QueryTotalLiquidityRequest
      | PlainMessage<QueryTotalLiquidityRequest>
      | undefined,
  ): boolean {
    return proto3.util.equals(QueryTotalLiquidityRequest, a, b)
  }
}

/**
 * @generated from message nibiru.spot.v1.QueryTotalLiquidityResponse
 */
export class QueryTotalLiquidityResponse extends Message<QueryTotalLiquidityResponse> {
  /**
   * @generated from field: repeated cosmos.base.v1beta1.Coin liquidity = 1;
   */
  liquidity: Coin[] = []

  constructor(data?: PartialMessage<QueryTotalLiquidityResponse>) {
    super()
    proto3.util.initPartial(data, this)
  }

  static readonly runtime: typeof proto3 = proto3
  static readonly typeName = "nibiru.spot.v1.QueryTotalLiquidityResponse"
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "liquidity", kind: "message", T: Coin, repeated: true },
  ])

  static fromBinary(
    bytes: Uint8Array,
    options?: Partial<BinaryReadOptions>,
  ): QueryTotalLiquidityResponse {
    return new QueryTotalLiquidityResponse().fromBinary(bytes, options)
  }

  static fromJson(
    jsonValue: JsonValue,
    options?: Partial<JsonReadOptions>,
  ): QueryTotalLiquidityResponse {
    return new QueryTotalLiquidityResponse().fromJson(jsonValue, options)
  }

  static fromJsonString(
    jsonString: string,
    options?: Partial<JsonReadOptions>,
  ): QueryTotalLiquidityResponse {
    return new QueryTotalLiquidityResponse().fromJsonString(jsonString, options)
  }

  static equals(
    a:
      | QueryTotalLiquidityResponse
      | PlainMessage<QueryTotalLiquidityResponse>
      | undefined,
    b:
      | QueryTotalLiquidityResponse
      | PlainMessage<QueryTotalLiquidityResponse>
      | undefined,
  ): boolean {
    return proto3.util.equals(QueryTotalLiquidityResponse, a, b)
  }
}

/**
 * --------------------------------------------
 * Query total liquidity for a pool
 *
 * @generated from message nibiru.spot.v1.QueryTotalPoolLiquidityRequest
 */
export class QueryTotalPoolLiquidityRequest extends Message<QueryTotalPoolLiquidityRequest> {
  /**
   * @generated from field: uint64 pool_id = 1;
   */
  poolId = protoInt64.zero

  constructor(data?: PartialMessage<QueryTotalPoolLiquidityRequest>) {
    super()
    proto3.util.initPartial(data, this)
  }

  static readonly runtime: typeof proto3 = proto3
  static readonly typeName = "nibiru.spot.v1.QueryTotalPoolLiquidityRequest"
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "pool_id", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
  ])

  static fromBinary(
    bytes: Uint8Array,
    options?: Partial<BinaryReadOptions>,
  ): QueryTotalPoolLiquidityRequest {
    return new QueryTotalPoolLiquidityRequest().fromBinary(bytes, options)
  }

  static fromJson(
    jsonValue: JsonValue,
    options?: Partial<JsonReadOptions>,
  ): QueryTotalPoolLiquidityRequest {
    return new QueryTotalPoolLiquidityRequest().fromJson(jsonValue, options)
  }

  static fromJsonString(
    jsonString: string,
    options?: Partial<JsonReadOptions>,
  ): QueryTotalPoolLiquidityRequest {
    return new QueryTotalPoolLiquidityRequest().fromJsonString(jsonString, options)
  }

  static equals(
    a:
      | QueryTotalPoolLiquidityRequest
      | PlainMessage<QueryTotalPoolLiquidityRequest>
      | undefined,
    b:
      | QueryTotalPoolLiquidityRequest
      | PlainMessage<QueryTotalPoolLiquidityRequest>
      | undefined,
  ): boolean {
    return proto3.util.equals(QueryTotalPoolLiquidityRequest, a, b)
  }
}

/**
 * @generated from message nibiru.spot.v1.QueryTotalPoolLiquidityResponse
 */
export class QueryTotalPoolLiquidityResponse extends Message<QueryTotalPoolLiquidityResponse> {
  /**
   * @generated from field: repeated cosmos.base.v1beta1.Coin liquidity = 1;
   */
  liquidity: Coin[] = []

  constructor(data?: PartialMessage<QueryTotalPoolLiquidityResponse>) {
    super()
    proto3.util.initPartial(data, this)
  }

  static readonly runtime: typeof proto3 = proto3
  static readonly typeName = "nibiru.spot.v1.QueryTotalPoolLiquidityResponse"
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "liquidity", kind: "message", T: Coin, repeated: true },
  ])

  static fromBinary(
    bytes: Uint8Array,
    options?: Partial<BinaryReadOptions>,
  ): QueryTotalPoolLiquidityResponse {
    return new QueryTotalPoolLiquidityResponse().fromBinary(bytes, options)
  }

  static fromJson(
    jsonValue: JsonValue,
    options?: Partial<JsonReadOptions>,
  ): QueryTotalPoolLiquidityResponse {
    return new QueryTotalPoolLiquidityResponse().fromJson(jsonValue, options)
  }

  static fromJsonString(
    jsonString: string,
    options?: Partial<JsonReadOptions>,
  ): QueryTotalPoolLiquidityResponse {
    return new QueryTotalPoolLiquidityResponse().fromJsonString(jsonString, options)
  }

  static equals(
    a:
      | QueryTotalPoolLiquidityResponse
      | PlainMessage<QueryTotalPoolLiquidityResponse>
      | undefined,
    b:
      | QueryTotalPoolLiquidityResponse
      | PlainMessage<QueryTotalPoolLiquidityResponse>
      | undefined,
  ): boolean {
    return proto3.util.equals(QueryTotalPoolLiquidityResponse, a, b)
  }
}

/**
 * @generated from message nibiru.spot.v1.QueryTotalSharesRequest
 */
export class QueryTotalSharesRequest extends Message<QueryTotalSharesRequest> {
  /**
   * @generated from field: uint64 pool_id = 1;
   */
  poolId = protoInt64.zero

  constructor(data?: PartialMessage<QueryTotalSharesRequest>) {
    super()
    proto3.util.initPartial(data, this)
  }

  static readonly runtime: typeof proto3 = proto3
  static readonly typeName = "nibiru.spot.v1.QueryTotalSharesRequest"
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "pool_id", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
  ])

  static fromBinary(
    bytes: Uint8Array,
    options?: Partial<BinaryReadOptions>,
  ): QueryTotalSharesRequest {
    return new QueryTotalSharesRequest().fromBinary(bytes, options)
  }

  static fromJson(
    jsonValue: JsonValue,
    options?: Partial<JsonReadOptions>,
  ): QueryTotalSharesRequest {
    return new QueryTotalSharesRequest().fromJson(jsonValue, options)
  }

  static fromJsonString(
    jsonString: string,
    options?: Partial<JsonReadOptions>,
  ): QueryTotalSharesRequest {
    return new QueryTotalSharesRequest().fromJsonString(jsonString, options)
  }

  static equals(
    a: QueryTotalSharesRequest | PlainMessage<QueryTotalSharesRequest> | undefined,
    b: QueryTotalSharesRequest | PlainMessage<QueryTotalSharesRequest> | undefined,
  ): boolean {
    return proto3.util.equals(QueryTotalSharesRequest, a, b)
  }
}

/**
 * @generated from message nibiru.spot.v1.QueryTotalSharesResponse
 */
export class QueryTotalSharesResponse extends Message<QueryTotalSharesResponse> {
  /**
   * sum of all LP tokens sent out
   *
   * @generated from field: cosmos.base.v1beta1.Coin total_shares = 1;
   */
  totalShares?: Coin

  constructor(data?: PartialMessage<QueryTotalSharesResponse>) {
    super()
    proto3.util.initPartial(data, this)
  }

  static readonly runtime: typeof proto3 = proto3
  static readonly typeName = "nibiru.spot.v1.QueryTotalSharesResponse"
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "total_shares", kind: "message", T: Coin },
  ])

  static fromBinary(
    bytes: Uint8Array,
    options?: Partial<BinaryReadOptions>,
  ): QueryTotalSharesResponse {
    return new QueryTotalSharesResponse().fromBinary(bytes, options)
  }

  static fromJson(
    jsonValue: JsonValue,
    options?: Partial<JsonReadOptions>,
  ): QueryTotalSharesResponse {
    return new QueryTotalSharesResponse().fromJson(jsonValue, options)
  }

  static fromJsonString(
    jsonString: string,
    options?: Partial<JsonReadOptions>,
  ): QueryTotalSharesResponse {
    return new QueryTotalSharesResponse().fromJsonString(jsonString, options)
  }

  static equals(
    a: QueryTotalSharesResponse | PlainMessage<QueryTotalSharesResponse> | undefined,
    b: QueryTotalSharesResponse | PlainMessage<QueryTotalSharesResponse> | undefined,
  ): boolean {
    return proto3.util.equals(QueryTotalSharesResponse, a, b)
  }
}

/**
 * Returns the amount of tokenInDenom to produce 1 tokenOutDenom
 * For example, if the price of NIBI = 9.123 NUSD, then setting
 * tokenInDenom=NUSD and tokenOutDenom=NIBI would give "9.123".
 *
 * @generated from message nibiru.spot.v1.QuerySpotPriceRequest
 */
export class QuerySpotPriceRequest extends Message<QuerySpotPriceRequest> {
  /**
   * @generated from field: uint64 pool_id = 1;
   */
  poolId = protoInt64.zero

  /**
   * the denomination of the token you are giving into the pool
   *
   * @generated from field: string token_in_denom = 2;
   */
  tokenInDenom = ""

  /**
   * the denomination of the token you are taking out of the pool
   *
   * @generated from field: string token_out_denom = 3;
   */
  tokenOutDenom = ""

  constructor(data?: PartialMessage<QuerySpotPriceRequest>) {
    super()
    proto3.util.initPartial(data, this)
  }

  static readonly runtime: typeof proto3 = proto3
  static readonly typeName = "nibiru.spot.v1.QuerySpotPriceRequest"
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "pool_id", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 2, name: "token_in_denom", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "token_out_denom", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ])

  static fromBinary(
    bytes: Uint8Array,
    options?: Partial<BinaryReadOptions>,
  ): QuerySpotPriceRequest {
    return new QuerySpotPriceRequest().fromBinary(bytes, options)
  }

  static fromJson(
    jsonValue: JsonValue,
    options?: Partial<JsonReadOptions>,
  ): QuerySpotPriceRequest {
    return new QuerySpotPriceRequest().fromJson(jsonValue, options)
  }

  static fromJsonString(
    jsonString: string,
    options?: Partial<JsonReadOptions>,
  ): QuerySpotPriceRequest {
    return new QuerySpotPriceRequest().fromJsonString(jsonString, options)
  }

  static equals(
    a: QuerySpotPriceRequest | PlainMessage<QuerySpotPriceRequest> | undefined,
    b: QuerySpotPriceRequest | PlainMessage<QuerySpotPriceRequest> | undefined,
  ): boolean {
    return proto3.util.equals(QuerySpotPriceRequest, a, b)
  }
}

/**
 * @generated from message nibiru.spot.v1.QuerySpotPriceResponse
 */
export class QuerySpotPriceResponse extends Message<QuerySpotPriceResponse> {
  /**
   * @generated from field: string spot_price = 1;
   */
  spotPrice = ""

  constructor(data?: PartialMessage<QuerySpotPriceResponse>) {
    super()
    proto3.util.initPartial(data, this)
  }

  static readonly runtime: typeof proto3 = proto3
  static readonly typeName = "nibiru.spot.v1.QuerySpotPriceResponse"
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "spot_price", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ])

  static fromBinary(
    bytes: Uint8Array,
    options?: Partial<BinaryReadOptions>,
  ): QuerySpotPriceResponse {
    return new QuerySpotPriceResponse().fromBinary(bytes, options)
  }

  static fromJson(
    jsonValue: JsonValue,
    options?: Partial<JsonReadOptions>,
  ): QuerySpotPriceResponse {
    return new QuerySpotPriceResponse().fromJson(jsonValue, options)
  }

  static fromJsonString(
    jsonString: string,
    options?: Partial<JsonReadOptions>,
  ): QuerySpotPriceResponse {
    return new QuerySpotPriceResponse().fromJsonString(jsonString, options)
  }

  static equals(
    a: QuerySpotPriceResponse | PlainMessage<QuerySpotPriceResponse> | undefined,
    b: QuerySpotPriceResponse | PlainMessage<QuerySpotPriceResponse> | undefined,
  ): boolean {
    return proto3.util.equals(QuerySpotPriceResponse, a, b)
  }
}

/**
 * Given an exact amount of tokens in and a target tokenOutDenom, calculates
 * the expected amount of tokens out received from a swap.
 *
 * @generated from message nibiru.spot.v1.QuerySwapExactAmountInRequest
 */
export class QuerySwapExactAmountInRequest extends Message<QuerySwapExactAmountInRequest> {
  /**
   * @generated from field: uint64 pool_id = 1;
   */
  poolId = protoInt64.zero

  /**
   * @generated from field: cosmos.base.v1beta1.Coin token_in = 2;
   */
  tokenIn?: Coin

  /**
   * @generated from field: string token_out_denom = 3;
   */
  tokenOutDenom = ""

  constructor(data?: PartialMessage<QuerySwapExactAmountInRequest>) {
    super()
    proto3.util.initPartial(data, this)
  }

  static readonly runtime: typeof proto3 = proto3
  static readonly typeName = "nibiru.spot.v1.QuerySwapExactAmountInRequest"
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "pool_id", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 2, name: "token_in", kind: "message", T: Coin },
    { no: 3, name: "token_out_denom", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ])

  static fromBinary(
    bytes: Uint8Array,
    options?: Partial<BinaryReadOptions>,
  ): QuerySwapExactAmountInRequest {
    return new QuerySwapExactAmountInRequest().fromBinary(bytes, options)
  }

  static fromJson(
    jsonValue: JsonValue,
    options?: Partial<JsonReadOptions>,
  ): QuerySwapExactAmountInRequest {
    return new QuerySwapExactAmountInRequest().fromJson(jsonValue, options)
  }

  static fromJsonString(
    jsonString: string,
    options?: Partial<JsonReadOptions>,
  ): QuerySwapExactAmountInRequest {
    return new QuerySwapExactAmountInRequest().fromJsonString(jsonString, options)
  }

  static equals(
    a:
      | QuerySwapExactAmountInRequest
      | PlainMessage<QuerySwapExactAmountInRequest>
      | undefined,
    b:
      | QuerySwapExactAmountInRequest
      | PlainMessage<QuerySwapExactAmountInRequest>
      | undefined,
  ): boolean {
    return proto3.util.equals(QuerySwapExactAmountInRequest, a, b)
  }
}

/**
 * @generated from message nibiru.spot.v1.QuerySwapExactAmountInResponse
 */
export class QuerySwapExactAmountInResponse extends Message<QuerySwapExactAmountInResponse> {
  /**
   * @generated from field: cosmos.base.v1beta1.Coin token_out = 2;
   */
  tokenOut?: Coin

  /**
   * @generated from field: cosmos.base.v1beta1.Coin fee = 3;
   */
  fee?: Coin

  constructor(data?: PartialMessage<QuerySwapExactAmountInResponse>) {
    super()
    proto3.util.initPartial(data, this)
  }

  static readonly runtime: typeof proto3 = proto3
  static readonly typeName = "nibiru.spot.v1.QuerySwapExactAmountInResponse"
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 2, name: "token_out", kind: "message", T: Coin },
    { no: 3, name: "fee", kind: "message", T: Coin },
  ])

  static fromBinary(
    bytes: Uint8Array,
    options?: Partial<BinaryReadOptions>,
  ): QuerySwapExactAmountInResponse {
    return new QuerySwapExactAmountInResponse().fromBinary(bytes, options)
  }

  static fromJson(
    jsonValue: JsonValue,
    options?: Partial<JsonReadOptions>,
  ): QuerySwapExactAmountInResponse {
    return new QuerySwapExactAmountInResponse().fromJson(jsonValue, options)
  }

  static fromJsonString(
    jsonString: string,
    options?: Partial<JsonReadOptions>,
  ): QuerySwapExactAmountInResponse {
    return new QuerySwapExactAmountInResponse().fromJsonString(jsonString, options)
  }

  static equals(
    a:
      | QuerySwapExactAmountInResponse
      | PlainMessage<QuerySwapExactAmountInResponse>
      | undefined,
    b:
      | QuerySwapExactAmountInResponse
      | PlainMessage<QuerySwapExactAmountInResponse>
      | undefined,
  ): boolean {
    return proto3.util.equals(QuerySwapExactAmountInResponse, a, b)
  }
}

/**
 * Given an exact amount of tokens out and a target tokenInDenom, calculates
 * the expected amount of tokens in required to do the swap.
 *
 * @generated from message nibiru.spot.v1.QuerySwapExactAmountOutRequest
 */
export class QuerySwapExactAmountOutRequest extends Message<QuerySwapExactAmountOutRequest> {
  /**
   * @generated from field: uint64 pool_id = 1;
   */
  poolId = protoInt64.zero

  /**
   * @generated from field: cosmos.base.v1beta1.Coin token_out = 2;
   */
  tokenOut?: Coin

  /**
   * @generated from field: string token_in_denom = 3;
   */
  tokenInDenom = ""

  constructor(data?: PartialMessage<QuerySwapExactAmountOutRequest>) {
    super()
    proto3.util.initPartial(data, this)
  }

  static readonly runtime: typeof proto3 = proto3
  static readonly typeName = "nibiru.spot.v1.QuerySwapExactAmountOutRequest"
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "pool_id", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 2, name: "token_out", kind: "message", T: Coin },
    { no: 3, name: "token_in_denom", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ])

  static fromBinary(
    bytes: Uint8Array,
    options?: Partial<BinaryReadOptions>,
  ): QuerySwapExactAmountOutRequest {
    return new QuerySwapExactAmountOutRequest().fromBinary(bytes, options)
  }

  static fromJson(
    jsonValue: JsonValue,
    options?: Partial<JsonReadOptions>,
  ): QuerySwapExactAmountOutRequest {
    return new QuerySwapExactAmountOutRequest().fromJson(jsonValue, options)
  }

  static fromJsonString(
    jsonString: string,
    options?: Partial<JsonReadOptions>,
  ): QuerySwapExactAmountOutRequest {
    return new QuerySwapExactAmountOutRequest().fromJsonString(jsonString, options)
  }

  static equals(
    a:
      | QuerySwapExactAmountOutRequest
      | PlainMessage<QuerySwapExactAmountOutRequest>
      | undefined,
    b:
      | QuerySwapExactAmountOutRequest
      | PlainMessage<QuerySwapExactAmountOutRequest>
      | undefined,
  ): boolean {
    return proto3.util.equals(QuerySwapExactAmountOutRequest, a, b)
  }
}

/**
 * @generated from message nibiru.spot.v1.QuerySwapExactAmountOutResponse
 */
export class QuerySwapExactAmountOutResponse extends Message<QuerySwapExactAmountOutResponse> {
  /**
   * @generated from field: cosmos.base.v1beta1.Coin token_in = 2;
   */
  tokenIn?: Coin

  constructor(data?: PartialMessage<QuerySwapExactAmountOutResponse>) {
    super()
    proto3.util.initPartial(data, this)
  }

  static readonly runtime: typeof proto3 = proto3
  static readonly typeName = "nibiru.spot.v1.QuerySwapExactAmountOutResponse"
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 2, name: "token_in", kind: "message", T: Coin },
  ])

  static fromBinary(
    bytes: Uint8Array,
    options?: Partial<BinaryReadOptions>,
  ): QuerySwapExactAmountOutResponse {
    return new QuerySwapExactAmountOutResponse().fromBinary(bytes, options)
  }

  static fromJson(
    jsonValue: JsonValue,
    options?: Partial<JsonReadOptions>,
  ): QuerySwapExactAmountOutResponse {
    return new QuerySwapExactAmountOutResponse().fromJson(jsonValue, options)
  }

  static fromJsonString(
    jsonString: string,
    options?: Partial<JsonReadOptions>,
  ): QuerySwapExactAmountOutResponse {
    return new QuerySwapExactAmountOutResponse().fromJsonString(jsonString, options)
  }

  static equals(
    a:
      | QuerySwapExactAmountOutResponse
      | PlainMessage<QuerySwapExactAmountOutResponse>
      | undefined,
    b:
      | QuerySwapExactAmountOutResponse
      | PlainMessage<QuerySwapExactAmountOutResponse>
      | undefined,
  ): boolean {
    return proto3.util.equals(QuerySwapExactAmountOutResponse, a, b)
  }
}

/**
 * @generated from message nibiru.spot.v1.QueryJoinExactAmountInRequest
 */
export class QueryJoinExactAmountInRequest extends Message<QueryJoinExactAmountInRequest> {
  /**
   * @generated from field: uint64 pool_id = 1;
   */
  poolId = protoInt64.zero

  /**
   * @generated from field: repeated cosmos.base.v1beta1.Coin tokens_in = 2;
   */
  tokensIn: Coin[] = []

  constructor(data?: PartialMessage<QueryJoinExactAmountInRequest>) {
    super()
    proto3.util.initPartial(data, this)
  }

  static readonly runtime: typeof proto3 = proto3
  static readonly typeName = "nibiru.spot.v1.QueryJoinExactAmountInRequest"
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "pool_id", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 2, name: "tokens_in", kind: "message", T: Coin, repeated: true },
  ])

  static fromBinary(
    bytes: Uint8Array,
    options?: Partial<BinaryReadOptions>,
  ): QueryJoinExactAmountInRequest {
    return new QueryJoinExactAmountInRequest().fromBinary(bytes, options)
  }

  static fromJson(
    jsonValue: JsonValue,
    options?: Partial<JsonReadOptions>,
  ): QueryJoinExactAmountInRequest {
    return new QueryJoinExactAmountInRequest().fromJson(jsonValue, options)
  }

  static fromJsonString(
    jsonString: string,
    options?: Partial<JsonReadOptions>,
  ): QueryJoinExactAmountInRequest {
    return new QueryJoinExactAmountInRequest().fromJsonString(jsonString, options)
  }

  static equals(
    a:
      | QueryJoinExactAmountInRequest
      | PlainMessage<QueryJoinExactAmountInRequest>
      | undefined,
    b:
      | QueryJoinExactAmountInRequest
      | PlainMessage<QueryJoinExactAmountInRequest>
      | undefined,
  ): boolean {
    return proto3.util.equals(QueryJoinExactAmountInRequest, a, b)
  }
}

/**
 * @generated from message nibiru.spot.v1.QueryJoinExactAmountInResponse
 */
export class QueryJoinExactAmountInResponse extends Message<QueryJoinExactAmountInResponse> {
  /**
   * amount of pool shares returned to user after join
   *
   * @generated from field: string pool_shares_out = 1;
   */
  poolSharesOut = ""

  /**
   * coins remaining after pool join
   *
   * @generated from field: repeated cosmos.base.v1beta1.Coin rem_coins = 2;
   */
  remCoins: Coin[] = []

  constructor(data?: PartialMessage<QueryJoinExactAmountInResponse>) {
    super()
    proto3.util.initPartial(data, this)
  }

  static readonly runtime: typeof proto3 = proto3
  static readonly typeName = "nibiru.spot.v1.QueryJoinExactAmountInResponse"
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "pool_shares_out", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "rem_coins", kind: "message", T: Coin, repeated: true },
  ])

  static fromBinary(
    bytes: Uint8Array,
    options?: Partial<BinaryReadOptions>,
  ): QueryJoinExactAmountInResponse {
    return new QueryJoinExactAmountInResponse().fromBinary(bytes, options)
  }

  static fromJson(
    jsonValue: JsonValue,
    options?: Partial<JsonReadOptions>,
  ): QueryJoinExactAmountInResponse {
    return new QueryJoinExactAmountInResponse().fromJson(jsonValue, options)
  }

  static fromJsonString(
    jsonString: string,
    options?: Partial<JsonReadOptions>,
  ): QueryJoinExactAmountInResponse {
    return new QueryJoinExactAmountInResponse().fromJsonString(jsonString, options)
  }

  static equals(
    a:
      | QueryJoinExactAmountInResponse
      | PlainMessage<QueryJoinExactAmountInResponse>
      | undefined,
    b:
      | QueryJoinExactAmountInResponse
      | PlainMessage<QueryJoinExactAmountInResponse>
      | undefined,
  ): boolean {
    return proto3.util.equals(QueryJoinExactAmountInResponse, a, b)
  }
}

/**
 * @generated from message nibiru.spot.v1.QueryJoinExactAmountOutRequest
 */
export class QueryJoinExactAmountOutRequest extends Message<QueryJoinExactAmountOutRequest> {
  /**
   * @generated from field: uint64 pool_id = 1;
   */
  poolId = protoInt64.zero

  constructor(data?: PartialMessage<QueryJoinExactAmountOutRequest>) {
    super()
    proto3.util.initPartial(data, this)
  }

  static readonly runtime: typeof proto3 = proto3
  static readonly typeName = "nibiru.spot.v1.QueryJoinExactAmountOutRequest"
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "pool_id", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
  ])

  static fromBinary(
    bytes: Uint8Array,
    options?: Partial<BinaryReadOptions>,
  ): QueryJoinExactAmountOutRequest {
    return new QueryJoinExactAmountOutRequest().fromBinary(bytes, options)
  }

  static fromJson(
    jsonValue: JsonValue,
    options?: Partial<JsonReadOptions>,
  ): QueryJoinExactAmountOutRequest {
    return new QueryJoinExactAmountOutRequest().fromJson(jsonValue, options)
  }

  static fromJsonString(
    jsonString: string,
    options?: Partial<JsonReadOptions>,
  ): QueryJoinExactAmountOutRequest {
    return new QueryJoinExactAmountOutRequest().fromJsonString(jsonString, options)
  }

  static equals(
    a:
      | QueryJoinExactAmountOutRequest
      | PlainMessage<QueryJoinExactAmountOutRequest>
      | undefined,
    b:
      | QueryJoinExactAmountOutRequest
      | PlainMessage<QueryJoinExactAmountOutRequest>
      | undefined,
  ): boolean {
    return proto3.util.equals(QueryJoinExactAmountOutRequest, a, b)
  }
}

/**
 * @generated from message nibiru.spot.v1.QueryJoinExactAmountOutResponse
 */
export class QueryJoinExactAmountOutResponse extends Message<QueryJoinExactAmountOutResponse> {
  constructor(data?: PartialMessage<QueryJoinExactAmountOutResponse>) {
    super()
    proto3.util.initPartial(data, this)
  }

  static readonly runtime: typeof proto3 = proto3
  static readonly typeName = "nibiru.spot.v1.QueryJoinExactAmountOutResponse"
  static readonly fields: FieldList = proto3.util.newFieldList(() => [])

  static fromBinary(
    bytes: Uint8Array,
    options?: Partial<BinaryReadOptions>,
  ): QueryJoinExactAmountOutResponse {
    return new QueryJoinExactAmountOutResponse().fromBinary(bytes, options)
  }

  static fromJson(
    jsonValue: JsonValue,
    options?: Partial<JsonReadOptions>,
  ): QueryJoinExactAmountOutResponse {
    return new QueryJoinExactAmountOutResponse().fromJson(jsonValue, options)
  }

  static fromJsonString(
    jsonString: string,
    options?: Partial<JsonReadOptions>,
  ): QueryJoinExactAmountOutResponse {
    return new QueryJoinExactAmountOutResponse().fromJsonString(jsonString, options)
  }

  static equals(
    a:
      | QueryJoinExactAmountOutResponse
      | PlainMessage<QueryJoinExactAmountOutResponse>
      | undefined,
    b:
      | QueryJoinExactAmountOutResponse
      | PlainMessage<QueryJoinExactAmountOutResponse>
      | undefined,
  ): boolean {
    return proto3.util.equals(QueryJoinExactAmountOutResponse, a, b)
  }
}

/**
 * @generated from message nibiru.spot.v1.QueryExitExactAmountInRequest
 */
export class QueryExitExactAmountInRequest extends Message<QueryExitExactAmountInRequest> {
  /**
   * @generated from field: uint64 pool_id = 1;
   */
  poolId = protoInt64.zero

  /**
   * amount of pool shares to return to pool
   *
   * @generated from field: string pool_shares_in = 2;
   */
  poolSharesIn = ""

  constructor(data?: PartialMessage<QueryExitExactAmountInRequest>) {
    super()
    proto3.util.initPartial(data, this)
  }

  static readonly runtime: typeof proto3 = proto3
  static readonly typeName = "nibiru.spot.v1.QueryExitExactAmountInRequest"
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "pool_id", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
    { no: 2, name: "pool_shares_in", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ])

  static fromBinary(
    bytes: Uint8Array,
    options?: Partial<BinaryReadOptions>,
  ): QueryExitExactAmountInRequest {
    return new QueryExitExactAmountInRequest().fromBinary(bytes, options)
  }

  static fromJson(
    jsonValue: JsonValue,
    options?: Partial<JsonReadOptions>,
  ): QueryExitExactAmountInRequest {
    return new QueryExitExactAmountInRequest().fromJson(jsonValue, options)
  }

  static fromJsonString(
    jsonString: string,
    options?: Partial<JsonReadOptions>,
  ): QueryExitExactAmountInRequest {
    return new QueryExitExactAmountInRequest().fromJsonString(jsonString, options)
  }

  static equals(
    a:
      | QueryExitExactAmountInRequest
      | PlainMessage<QueryExitExactAmountInRequest>
      | undefined,
    b:
      | QueryExitExactAmountInRequest
      | PlainMessage<QueryExitExactAmountInRequest>
      | undefined,
  ): boolean {
    return proto3.util.equals(QueryExitExactAmountInRequest, a, b)
  }
}

/**
 * @generated from message nibiru.spot.v1.QueryExitExactAmountInResponse
 */
export class QueryExitExactAmountInResponse extends Message<QueryExitExactAmountInResponse> {
  /**
   * coins obtained after exiting
   *
   * @generated from field: repeated cosmos.base.v1beta1.Coin tokens_out = 1;
   */
  tokensOut: Coin[] = []

  /**
   * @generated from field: repeated cosmos.base.v1beta1.Coin fees = 2;
   */
  fees: Coin[] = []

  constructor(data?: PartialMessage<QueryExitExactAmountInResponse>) {
    super()
    proto3.util.initPartial(data, this)
  }

  static readonly runtime: typeof proto3 = proto3
  static readonly typeName = "nibiru.spot.v1.QueryExitExactAmountInResponse"
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "tokens_out", kind: "message", T: Coin, repeated: true },
    { no: 2, name: "fees", kind: "message", T: Coin, repeated: true },
  ])

  static fromBinary(
    bytes: Uint8Array,
    options?: Partial<BinaryReadOptions>,
  ): QueryExitExactAmountInResponse {
    return new QueryExitExactAmountInResponse().fromBinary(bytes, options)
  }

  static fromJson(
    jsonValue: JsonValue,
    options?: Partial<JsonReadOptions>,
  ): QueryExitExactAmountInResponse {
    return new QueryExitExactAmountInResponse().fromJson(jsonValue, options)
  }

  static fromJsonString(
    jsonString: string,
    options?: Partial<JsonReadOptions>,
  ): QueryExitExactAmountInResponse {
    return new QueryExitExactAmountInResponse().fromJsonString(jsonString, options)
  }

  static equals(
    a:
      | QueryExitExactAmountInResponse
      | PlainMessage<QueryExitExactAmountInResponse>
      | undefined,
    b:
      | QueryExitExactAmountInResponse
      | PlainMessage<QueryExitExactAmountInResponse>
      | undefined,
  ): boolean {
    return proto3.util.equals(QueryExitExactAmountInResponse, a, b)
  }
}

/**
 * @generated from message nibiru.spot.v1.QueryExitExactAmountOutRequest
 */
export class QueryExitExactAmountOutRequest extends Message<QueryExitExactAmountOutRequest> {
  /**
   * @generated from field: uint64 pool_id = 1;
   */
  poolId = protoInt64.zero

  constructor(data?: PartialMessage<QueryExitExactAmountOutRequest>) {
    super()
    proto3.util.initPartial(data, this)
  }

  static readonly runtime: typeof proto3 = proto3
  static readonly typeName = "nibiru.spot.v1.QueryExitExactAmountOutRequest"
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "pool_id", kind: "scalar", T: 4 /* ScalarType.UINT64 */ },
  ])

  static fromBinary(
    bytes: Uint8Array,
    options?: Partial<BinaryReadOptions>,
  ): QueryExitExactAmountOutRequest {
    return new QueryExitExactAmountOutRequest().fromBinary(bytes, options)
  }

  static fromJson(
    jsonValue: JsonValue,
    options?: Partial<JsonReadOptions>,
  ): QueryExitExactAmountOutRequest {
    return new QueryExitExactAmountOutRequest().fromJson(jsonValue, options)
  }

  static fromJsonString(
    jsonString: string,
    options?: Partial<JsonReadOptions>,
  ): QueryExitExactAmountOutRequest {
    return new QueryExitExactAmountOutRequest().fromJsonString(jsonString, options)
  }

  static equals(
    a:
      | QueryExitExactAmountOutRequest
      | PlainMessage<QueryExitExactAmountOutRequest>
      | undefined,
    b:
      | QueryExitExactAmountOutRequest
      | PlainMessage<QueryExitExactAmountOutRequest>
      | undefined,
  ): boolean {
    return proto3.util.equals(QueryExitExactAmountOutRequest, a, b)
  }
}

/**
 * @generated from message nibiru.spot.v1.QueryExitExactAmountOutResponse
 */
export class QueryExitExactAmountOutResponse extends Message<QueryExitExactAmountOutResponse> {
  constructor(data?: PartialMessage<QueryExitExactAmountOutResponse>) {
    super()
    proto3.util.initPartial(data, this)
  }

  static readonly runtime: typeof proto3 = proto3
  static readonly typeName = "nibiru.spot.v1.QueryExitExactAmountOutResponse"
  static readonly fields: FieldList = proto3.util.newFieldList(() => [])

  static fromBinary(
    bytes: Uint8Array,
    options?: Partial<BinaryReadOptions>,
  ): QueryExitExactAmountOutResponse {
    return new QueryExitExactAmountOutResponse().fromBinary(bytes, options)
  }

  static fromJson(
    jsonValue: JsonValue,
    options?: Partial<JsonReadOptions>,
  ): QueryExitExactAmountOutResponse {
    return new QueryExitExactAmountOutResponse().fromJson(jsonValue, options)
  }

  static fromJsonString(
    jsonString: string,
    options?: Partial<JsonReadOptions>,
  ): QueryExitExactAmountOutResponse {
    return new QueryExitExactAmountOutResponse().fromJsonString(jsonString, options)
  }

  static equals(
    a:
      | QueryExitExactAmountOutResponse
      | PlainMessage<QueryExitExactAmountOutResponse>
      | undefined,
    b:
      | QueryExitExactAmountOutResponse
      | PlainMessage<QueryExitExactAmountOutResponse>
      | undefined,
  ): boolean {
    return proto3.util.equals(QueryExitExactAmountOutResponse, a, b)
  }
}
