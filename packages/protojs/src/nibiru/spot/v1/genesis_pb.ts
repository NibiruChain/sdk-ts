// @generated by protoc-gen-es v1.2.1 with parameter "target=ts"
// @generated from file nibiru/spot/v1/genesis.proto (package nibiru.spot.v1, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type {
  BinaryReadOptions,
  FieldList,
  JsonReadOptions,
  JsonValue,
  PartialMessage,
  PlainMessage,
} from "@bufbuild/protobuf"
import { Message, proto3 } from "@bufbuild/protobuf"
import { Params } from "./params_pb.js"
import { Pool } from "./pool_pb.js"

/**
 * GenesisState defines the spot module's genesis state.
 *
 * @generated from message nibiru.spot.v1.GenesisState
 */
export class GenesisState extends Message<GenesisState> {
  /**
   * params defines all the parameters of the module.
   *
   * @generated from field: nibiru.spot.v1.Params params = 1;
   */
  params?: Params

  /**
   * pools defines all the pools of the module.
   *
   * @generated from field: repeated nibiru.spot.v1.Pool pools = 2;
   */
  pools: Pool[] = []

  constructor(data?: PartialMessage<GenesisState>) {
    super()
    proto3.util.initPartial(data, this)
  }

  static readonly runtime: typeof proto3 = proto3
  static readonly typeName = "nibiru.spot.v1.GenesisState"
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "params", kind: "message", T: Params },
    { no: 2, name: "pools", kind: "message", T: Pool, repeated: true },
  ])

  static fromBinary(
    bytes: Uint8Array,
    options?: Partial<BinaryReadOptions>,
  ): GenesisState {
    return new GenesisState().fromBinary(bytes, options)
  }

  static fromJson(
    jsonValue: JsonValue,
    options?: Partial<JsonReadOptions>,
  ): GenesisState {
    return new GenesisState().fromJson(jsonValue, options)
  }

  static fromJsonString(
    jsonString: string,
    options?: Partial<JsonReadOptions>,
  ): GenesisState {
    return new GenesisState().fromJsonString(jsonString, options)
  }

  static equals(
    a: GenesisState | PlainMessage<GenesisState> | undefined,
    b: GenesisState | PlainMessage<GenesisState> | undefined,
  ): boolean {
    return proto3.util.equals(GenesisState, a, b)
  }
}
