// @generated by protoc-gen-es v1.2.1 with parameter "target=ts"
// @generated from file nibiru/perp/v2/genesis.proto (package nibiru.perp.v2, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type {
  BinaryReadOptions,
  FieldList,
  JsonReadOptions,
  JsonValue,
  PartialMessage,
  PlainMessage,
} from "@bufbuild/protobuf"
import { Message, proto3 } from "@bufbuild/protobuf"
import { AMM, Market, Position, ReserveSnapshot } from "./state_pb.js"

/**
 * GenesisState defines the perp module's genesis state.
 *
 * @generated from message nibiru.perp.v2.GenesisState
 */
export class GenesisState extends Message<GenesisState> {
  /**
   * @generated from field: repeated nibiru.perp.v2.Market markets = 2;
   */
  markets: Market[] = []

  /**
   * @generated from field: repeated nibiru.perp.v2.AMM amms = 3;
   */
  amms: AMM[] = []

  /**
   * @generated from field: repeated nibiru.perp.v2.Position positions = 4;
   */
  positions: Position[] = []

  /**
   * @generated from field: repeated nibiru.perp.v2.ReserveSnapshot reserve_snapshots = 5;
   */
  reserveSnapshots: ReserveSnapshot[] = []

  constructor(data?: PartialMessage<GenesisState>) {
    super()
    proto3.util.initPartial(data, this)
  }

  static readonly runtime: typeof proto3 = proto3
  static readonly typeName = "nibiru.perp.v2.GenesisState"
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 2, name: "markets", kind: "message", T: Market, repeated: true },
    { no: 3, name: "amms", kind: "message", T: AMM, repeated: true },
    { no: 4, name: "positions", kind: "message", T: Position, repeated: true },
    {
      no: 5,
      name: "reserve_snapshots",
      kind: "message",
      T: ReserveSnapshot,
      repeated: true,
    },
  ])

  static fromBinary(
    bytes: Uint8Array,
    options?: Partial<BinaryReadOptions>,
  ): GenesisState {
    return new GenesisState().fromBinary(bytes, options)
  }

  static fromJson(
    jsonValue: JsonValue,
    options?: Partial<JsonReadOptions>,
  ): GenesisState {
    return new GenesisState().fromJson(jsonValue, options)
  }

  static fromJsonString(
    jsonString: string,
    options?: Partial<JsonReadOptions>,
  ): GenesisState {
    return new GenesisState().fromJsonString(jsonString, options)
  }

  static equals(
    a: GenesisState | PlainMessage<GenesisState> | undefined,
    b: GenesisState | PlainMessage<GenesisState> | undefined,
  ): boolean {
    return proto3.util.equals(GenesisState, a, b)
  }
}
