// @generated by protoc-gen-es v1.2.1 with parameter "target=ts"
// @generated from file nibiru/stablecoin/v1/params.proto (package nibiru.stablecoin.v1, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type {
  BinaryReadOptions,
  FieldList,
  JsonReadOptions,
  JsonValue,
  PartialMessage,
  PlainMessage,
} from "@bufbuild/protobuf"
import { Message, proto3, protoInt64 } from "@bufbuild/protobuf"

/**
 * Params defines the parameters for the module.
 *
 * @generated from message nibiru.stablecoin.v1.Params
 */
export class Params extends Message<Params> {
  /**
   * collRatio is the ratio needed as collateral to exchange for stables
   *
   * @generated from field: int64 coll_ratio = 1;
   */
  collRatio = protoInt64.zero

  /**
   * feeRatio is the ratio taken as fees when minting or burning stables
   *
   * @generated from field: int64 fee_ratio = 2;
   */
  feeRatio = protoInt64.zero

  /**
   * efFeeRatio is the ratio taken from the fees that goes to Ecosystem Fund
   *
   * @generated from field: int64 ef_fee_ratio = 3;
   */
  efFeeRatio = protoInt64.zero

  /**
   * BonusRateRecoll is the percentage of extra stablecoin value given to the
   * caller of 'Recollateralize' in units of governance tokens.
   *
   * @generated from field: int64 bonus_rate_recoll = 4;
   */
  bonusRateRecoll = protoInt64.zero

  /**
   * distr_epoch_identifier defines the frequnecy of update for the collateral
   * ratio
   *
   * @generated from field: string distr_epoch_identifier = 5;
   */
  distrEpochIdentifier = ""

  /**
   * adjustmentStep is the size of the step taken when updating the collateral
   * ratio
   *
   * @generated from field: int64 adjustment_step = 6;
   */
  adjustmentStep = protoInt64.zero

  /**
   * priceLowerBound is the lower bound for the stable coin to trigger a
   * collateral ratio update
   *
   * @generated from field: int64 price_lower_bound = 7;
   */
  priceLowerBound = protoInt64.zero

  /**
   * priceUpperBound is the upper bound for the stable coin to trigger a
   * collateral ratio update
   *
   * @generated from field: int64 price_upper_bound = 8;
   */
  priceUpperBound = protoInt64.zero

  /**
   * isCollateralRatioValid checks if the collateral ratio is correctly updated
   *
   * @generated from field: bool is_collateral_ratio_valid = 9;
   */
  isCollateralRatioValid = false

  constructor(data?: PartialMessage<Params>) {
    super()
    proto3.util.initPartial(data, this)
  }

  static readonly runtime: typeof proto3 = proto3
  static readonly typeName = "nibiru.stablecoin.v1.Params"
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "coll_ratio", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 2, name: "fee_ratio", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 3, name: "ef_fee_ratio", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 4, name: "bonus_rate_recoll", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    {
      no: 5,
      name: "distr_epoch_identifier",
      kind: "scalar",
      T: 9 /* ScalarType.STRING */,
    },
    { no: 6, name: "adjustment_step", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 7, name: "price_lower_bound", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    { no: 8, name: "price_upper_bound", kind: "scalar", T: 3 /* ScalarType.INT64 */ },
    {
      no: 9,
      name: "is_collateral_ratio_valid",
      kind: "scalar",
      T: 8 /* ScalarType.BOOL */,
    },
  ])

  static fromBinary(bytes: Uint8Array, options?: Partial<BinaryReadOptions>): Params {
    return new Params().fromBinary(bytes, options)
  }

  static fromJson(jsonValue: JsonValue, options?: Partial<JsonReadOptions>): Params {
    return new Params().fromJson(jsonValue, options)
  }

  static fromJsonString(
    jsonString: string,
    options?: Partial<JsonReadOptions>,
  ): Params {
    return new Params().fromJsonString(jsonString, options)
  }

  static equals(
    a: Params | PlainMessage<Params> | undefined,
    b: Params | PlainMessage<Params> | undefined,
  ): boolean {
    return proto3.util.equals(Params, a, b)
  }
}
