// @generated by protoc-gen-es v1.2.1 with parameter "target=ts"
// @generated from file nibiru/stablecoin/v1/tx.proto (package nibiru.stablecoin.v1, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type {
  BinaryReadOptions,
  FieldList,
  JsonReadOptions,
  JsonValue,
  PartialMessage,
  PlainMessage,
} from "@bufbuild/protobuf"
import { Message, proto3 } from "@bufbuild/protobuf"
import { Coin } from "../../../cosmos/base/v1beta1/coin_pb.js"

/**
 *
 * MsgMintStable: Msg to mint NUSD. A user deposits NIBI and collateral and gets
 * NUSD in return. The amount of NUSD received depends on the current price set
 * by the oracle library and the current collateral ratio for the protocol.
 *
 * @generated from message nibiru.stablecoin.v1.MsgMintStable
 */
export class MsgMintStable extends Message<MsgMintStable> {
  /**
   * @generated from field: string creator = 1;
   */
  creator = ""

  /**
   * @generated from field: cosmos.base.v1beta1.Coin stable = 2;
   */
  stable?: Coin

  constructor(data?: PartialMessage<MsgMintStable>) {
    super()
    proto3.util.initPartial(data, this)
  }

  static readonly runtime: typeof proto3 = proto3
  static readonly typeName = "nibiru.stablecoin.v1.MsgMintStable"
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "creator", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "stable", kind: "message", T: Coin },
  ])

  static fromBinary(
    bytes: Uint8Array,
    options?: Partial<BinaryReadOptions>,
  ): MsgMintStable {
    return new MsgMintStable().fromBinary(bytes, options)
  }

  static fromJson(
    jsonValue: JsonValue,
    options?: Partial<JsonReadOptions>,
  ): MsgMintStable {
    return new MsgMintStable().fromJson(jsonValue, options)
  }

  static fromJsonString(
    jsonString: string,
    options?: Partial<JsonReadOptions>,
  ): MsgMintStable {
    return new MsgMintStable().fromJsonString(jsonString, options)
  }

  static equals(
    a: MsgMintStable | PlainMessage<MsgMintStable> | undefined,
    b: MsgMintStable | PlainMessage<MsgMintStable> | undefined,
  ): boolean {
    return proto3.util.equals(MsgMintStable, a, b)
  }
}

/**
 * MsgMintStableResponse specifies the amount of NUSD token the user will
 * receive after their mint transaction
 *
 * @generated from message nibiru.stablecoin.v1.MsgMintStableResponse
 */
export class MsgMintStableResponse extends Message<MsgMintStableResponse> {
  /**
   * @generated from field: cosmos.base.v1beta1.Coin stable = 1;
   */
  stable?: Coin

  /**
   * @generated from field: repeated cosmos.base.v1beta1.Coin used_coins = 2;
   */
  usedCoins: Coin[] = []

  /**
   * @generated from field: repeated cosmos.base.v1beta1.Coin fees_payed = 3;
   */
  feesPayed: Coin[] = []

  constructor(data?: PartialMessage<MsgMintStableResponse>) {
    super()
    proto3.util.initPartial(data, this)
  }

  static readonly runtime: typeof proto3 = proto3
  static readonly typeName = "nibiru.stablecoin.v1.MsgMintStableResponse"
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "stable", kind: "message", T: Coin },
    { no: 2, name: "used_coins", kind: "message", T: Coin, repeated: true },
    { no: 3, name: "fees_payed", kind: "message", T: Coin, repeated: true },
  ])

  static fromBinary(
    bytes: Uint8Array,
    options?: Partial<BinaryReadOptions>,
  ): MsgMintStableResponse {
    return new MsgMintStableResponse().fromBinary(bytes, options)
  }

  static fromJson(
    jsonValue: JsonValue,
    options?: Partial<JsonReadOptions>,
  ): MsgMintStableResponse {
    return new MsgMintStableResponse().fromJson(jsonValue, options)
  }

  static fromJsonString(
    jsonString: string,
    options?: Partial<JsonReadOptions>,
  ): MsgMintStableResponse {
    return new MsgMintStableResponse().fromJsonString(jsonString, options)
  }

  static equals(
    a: MsgMintStableResponse | PlainMessage<MsgMintStableResponse> | undefined,
    b: MsgMintStableResponse | PlainMessage<MsgMintStableResponse> | undefined,
  ): boolean {
    return proto3.util.equals(MsgMintStableResponse, a, b)
  }
}

/**
 *
 * MsgBurnStable allows users to burn NUSD in exchange for NIBI and collateral.
 * The amount of NIBI and Collateral received depends on the current price set by
 * the x/oracle library and the current collateral ratio.
 *
 * @generated from message nibiru.stablecoin.v1.MsgBurnStable
 */
export class MsgBurnStable extends Message<MsgBurnStable> {
  /**
   * @generated from field: string creator = 1;
   */
  creator = ""

  /**
   * @generated from field: cosmos.base.v1beta1.Coin stable = 2;
   */
  stable?: Coin

  constructor(data?: PartialMessage<MsgBurnStable>) {
    super()
    proto3.util.initPartial(data, this)
  }

  static readonly runtime: typeof proto3 = proto3
  static readonly typeName = "nibiru.stablecoin.v1.MsgBurnStable"
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "creator", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "stable", kind: "message", T: Coin },
  ])

  static fromBinary(
    bytes: Uint8Array,
    options?: Partial<BinaryReadOptions>,
  ): MsgBurnStable {
    return new MsgBurnStable().fromBinary(bytes, options)
  }

  static fromJson(
    jsonValue: JsonValue,
    options?: Partial<JsonReadOptions>,
  ): MsgBurnStable {
    return new MsgBurnStable().fromJson(jsonValue, options)
  }

  static fromJsonString(
    jsonString: string,
    options?: Partial<JsonReadOptions>,
  ): MsgBurnStable {
    return new MsgBurnStable().fromJsonString(jsonString, options)
  }

  static equals(
    a: MsgBurnStable | PlainMessage<MsgBurnStable> | undefined,
    b: MsgBurnStable | PlainMessage<MsgBurnStable> | undefined,
  ): boolean {
    return proto3.util.equals(MsgBurnStable, a, b)
  }
}

/**
 * MsgBurnStableResponse specifies the amount of collateral and governance
 * token the user will receive after their burn transaction.
 *
 * @generated from message nibiru.stablecoin.v1.MsgBurnStableResponse
 */
export class MsgBurnStableResponse extends Message<MsgBurnStableResponse> {
  /**
   * @generated from field: cosmos.base.v1beta1.Coin collateral = 1;
   */
  collateral?: Coin

  /**
   * @generated from field: cosmos.base.v1beta1.Coin gov = 2;
   */
  gov?: Coin

  /**
   * @generated from field: repeated cosmos.base.v1beta1.Coin fees_payed = 3;
   */
  feesPayed: Coin[] = []

  constructor(data?: PartialMessage<MsgBurnStableResponse>) {
    super()
    proto3.util.initPartial(data, this)
  }

  static readonly runtime: typeof proto3 = proto3
  static readonly typeName = "nibiru.stablecoin.v1.MsgBurnStableResponse"
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "collateral", kind: "message", T: Coin },
    { no: 2, name: "gov", kind: "message", T: Coin },
    { no: 3, name: "fees_payed", kind: "message", T: Coin, repeated: true },
  ])

  static fromBinary(
    bytes: Uint8Array,
    options?: Partial<BinaryReadOptions>,
  ): MsgBurnStableResponse {
    return new MsgBurnStableResponse().fromBinary(bytes, options)
  }

  static fromJson(
    jsonValue: JsonValue,
    options?: Partial<JsonReadOptions>,
  ): MsgBurnStableResponse {
    return new MsgBurnStableResponse().fromJson(jsonValue, options)
  }

  static fromJsonString(
    jsonString: string,
    options?: Partial<JsonReadOptions>,
  ): MsgBurnStableResponse {
    return new MsgBurnStableResponse().fromJsonString(jsonString, options)
  }

  static equals(
    a: MsgBurnStableResponse | PlainMessage<MsgBurnStableResponse> | undefined,
    b: MsgBurnStableResponse | PlainMessage<MsgBurnStableResponse> | undefined,
  ): boolean {
    return proto3.util.equals(MsgBurnStableResponse, a, b)
  }
}

/**
 * MsgRecollateralize
 *
 * @generated from message nibiru.stablecoin.v1.MsgRecollateralize
 */
export class MsgRecollateralize extends Message<MsgRecollateralize> {
  /**
   * @generated from field: string creator = 1;
   */
  creator = ""

  /**
   * @generated from field: cosmos.base.v1beta1.Coin coll = 2;
   */
  coll?: Coin

  constructor(data?: PartialMessage<MsgRecollateralize>) {
    super()
    proto3.util.initPartial(data, this)
  }

  static readonly runtime: typeof proto3 = proto3
  static readonly typeName = "nibiru.stablecoin.v1.MsgRecollateralize"
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "creator", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "coll", kind: "message", T: Coin },
  ])

  static fromBinary(
    bytes: Uint8Array,
    options?: Partial<BinaryReadOptions>,
  ): MsgRecollateralize {
    return new MsgRecollateralize().fromBinary(bytes, options)
  }

  static fromJson(
    jsonValue: JsonValue,
    options?: Partial<JsonReadOptions>,
  ): MsgRecollateralize {
    return new MsgRecollateralize().fromJson(jsonValue, options)
  }

  static fromJsonString(
    jsonString: string,
    options?: Partial<JsonReadOptions>,
  ): MsgRecollateralize {
    return new MsgRecollateralize().fromJsonString(jsonString, options)
  }

  static equals(
    a: MsgRecollateralize | PlainMessage<MsgRecollateralize> | undefined,
    b: MsgRecollateralize | PlainMessage<MsgRecollateralize> | undefined,
  ): boolean {
    return proto3.util.equals(MsgRecollateralize, a, b)
  }
}

/**
 * MsgRecollateralizeResponse is the output of a successful 'Recollateralize'
 *
 * @generated from message nibiru.stablecoin.v1.MsgRecollateralizeResponse
 */
export class MsgRecollateralizeResponse extends Message<MsgRecollateralizeResponse> {
  /**
   * Gov (sdk.Coin): Tokens rewarded to the caller in exchange for her
   * collateral.
   *
   * @generated from field: cosmos.base.v1beta1.Coin gov = 1;
   */
  gov?: Coin

  constructor(data?: PartialMessage<MsgRecollateralizeResponse>) {
    super()
    proto3.util.initPartial(data, this)
  }

  static readonly runtime: typeof proto3 = proto3
  static readonly typeName = "nibiru.stablecoin.v1.MsgRecollateralizeResponse"
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "gov", kind: "message", T: Coin },
  ])

  static fromBinary(
    bytes: Uint8Array,
    options?: Partial<BinaryReadOptions>,
  ): MsgRecollateralizeResponse {
    return new MsgRecollateralizeResponse().fromBinary(bytes, options)
  }

  static fromJson(
    jsonValue: JsonValue,
    options?: Partial<JsonReadOptions>,
  ): MsgRecollateralizeResponse {
    return new MsgRecollateralizeResponse().fromJson(jsonValue, options)
  }

  static fromJsonString(
    jsonString: string,
    options?: Partial<JsonReadOptions>,
  ): MsgRecollateralizeResponse {
    return new MsgRecollateralizeResponse().fromJsonString(jsonString, options)
  }

  static equals(
    a:
      | MsgRecollateralizeResponse
      | PlainMessage<MsgRecollateralizeResponse>
      | undefined,
    b:
      | MsgRecollateralizeResponse
      | PlainMessage<MsgRecollateralizeResponse>
      | undefined,
  ): boolean {
    return proto3.util.equals(MsgRecollateralizeResponse, a, b)
  }
}

/**
 * MsgBuyback
 *
 * @generated from message nibiru.stablecoin.v1.MsgBuyback
 */
export class MsgBuyback extends Message<MsgBuyback> {
  /**
   * @generated from field: string creator = 1;
   */
  creator = ""

  /**
   * Gov (sdk.Coin): Tokens the caller wants to sell to the protocol in exchange
   * for collateral.
   *
   * @generated from field: cosmos.base.v1beta1.Coin gov = 2;
   */
  gov?: Coin

  constructor(data?: PartialMessage<MsgBuyback>) {
    super()
    proto3.util.initPartial(data, this)
  }

  static readonly runtime: typeof proto3 = proto3
  static readonly typeName = "nibiru.stablecoin.v1.MsgBuyback"
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "creator", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "gov", kind: "message", T: Coin },
  ])

  static fromBinary(
    bytes: Uint8Array,
    options?: Partial<BinaryReadOptions>,
  ): MsgBuyback {
    return new MsgBuyback().fromBinary(bytes, options)
  }

  static fromJson(
    jsonValue: JsonValue,
    options?: Partial<JsonReadOptions>,
  ): MsgBuyback {
    return new MsgBuyback().fromJson(jsonValue, options)
  }

  static fromJsonString(
    jsonString: string,
    options?: Partial<JsonReadOptions>,
  ): MsgBuyback {
    return new MsgBuyback().fromJsonString(jsonString, options)
  }

  static equals(
    a: MsgBuyback | PlainMessage<MsgBuyback> | undefined,
    b: MsgBuyback | PlainMessage<MsgBuyback> | undefined,
  ): boolean {
    return proto3.util.equals(MsgBuyback, a, b)
  }
}

/**
 * MsgBuybackResponse is the output of a successful 'Buyback'
 *
 * @generated from message nibiru.stablecoin.v1.MsgBuybackResponse
 */
export class MsgBuybackResponse extends Message<MsgBuybackResponse> {
  /**
   * Coll (sdk.Coin): Tokens sold to the caller in exchange for her collateral.
   *
   * @generated from field: cosmos.base.v1beta1.Coin coll = 1;
   */
  coll?: Coin

  constructor(data?: PartialMessage<MsgBuybackResponse>) {
    super()
    proto3.util.initPartial(data, this)
  }

  static readonly runtime: typeof proto3 = proto3
  static readonly typeName = "nibiru.stablecoin.v1.MsgBuybackResponse"
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "coll", kind: "message", T: Coin },
  ])

  static fromBinary(
    bytes: Uint8Array,
    options?: Partial<BinaryReadOptions>,
  ): MsgBuybackResponse {
    return new MsgBuybackResponse().fromBinary(bytes, options)
  }

  static fromJson(
    jsonValue: JsonValue,
    options?: Partial<JsonReadOptions>,
  ): MsgBuybackResponse {
    return new MsgBuybackResponse().fromJson(jsonValue, options)
  }

  static fromJsonString(
    jsonString: string,
    options?: Partial<JsonReadOptions>,
  ): MsgBuybackResponse {
    return new MsgBuybackResponse().fromJsonString(jsonString, options)
  }

  static equals(
    a: MsgBuybackResponse | PlainMessage<MsgBuybackResponse> | undefined,
    b: MsgBuybackResponse | PlainMessage<MsgBuybackResponse> | undefined,
  ): boolean {
    return proto3.util.equals(MsgBuybackResponse, a, b)
  }
}
