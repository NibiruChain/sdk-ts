// @generated by protoc-gen-es v1.2.1 with parameter "target=ts"
// @generated from file nibiru/stablecoin/v1/query.proto (package nibiru.stablecoin.v1, syntax proto3)
/* eslint-disable */
// @ts-nocheck

import type {
  BinaryReadOptions,
  FieldList,
  JsonReadOptions,
  JsonValue,
  PartialMessage,
  PlainMessage,
} from "@bufbuild/protobuf"
import { Message, proto3 } from "@bufbuild/protobuf"
import { Params } from "./params_pb.js"
import { Coin } from "../../../cosmos/base/v1beta1/coin_pb.js"

/**
 * QueryParamsRequest is request type for the Query/Params RPC method.
 *
 * @generated from message nibiru.stablecoin.v1.QueryParamsRequest
 */
export class QueryParamsRequest extends Message<QueryParamsRequest> {
  constructor(data?: PartialMessage<QueryParamsRequest>) {
    super()
    proto3.util.initPartial(data, this)
  }

  static readonly runtime: typeof proto3 = proto3
  static readonly typeName = "nibiru.stablecoin.v1.QueryParamsRequest"
  static readonly fields: FieldList = proto3.util.newFieldList(() => [])

  static fromBinary(
    bytes: Uint8Array,
    options?: Partial<BinaryReadOptions>,
  ): QueryParamsRequest {
    return new QueryParamsRequest().fromBinary(bytes, options)
  }

  static fromJson(
    jsonValue: JsonValue,
    options?: Partial<JsonReadOptions>,
  ): QueryParamsRequest {
    return new QueryParamsRequest().fromJson(jsonValue, options)
  }

  static fromJsonString(
    jsonString: string,
    options?: Partial<JsonReadOptions>,
  ): QueryParamsRequest {
    return new QueryParamsRequest().fromJsonString(jsonString, options)
  }

  static equals(
    a: QueryParamsRequest | PlainMessage<QueryParamsRequest> | undefined,
    b: QueryParamsRequest | PlainMessage<QueryParamsRequest> | undefined,
  ): boolean {
    return proto3.util.equals(QueryParamsRequest, a, b)
  }
}

/**
 * QueryParamsResponse is response type for the Query/Params RPC method.
 *
 * @generated from message nibiru.stablecoin.v1.QueryParamsResponse
 */
export class QueryParamsResponse extends Message<QueryParamsResponse> {
  /**
   * params holds all the parameters of this module.
   *
   * @generated from field: nibiru.stablecoin.v1.Params params = 1;
   */
  params?: Params

  constructor(data?: PartialMessage<QueryParamsResponse>) {
    super()
    proto3.util.initPartial(data, this)
  }

  static readonly runtime: typeof proto3 = proto3
  static readonly typeName = "nibiru.stablecoin.v1.QueryParamsResponse"
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "params", kind: "message", T: Params },
  ])

  static fromBinary(
    bytes: Uint8Array,
    options?: Partial<BinaryReadOptions>,
  ): QueryParamsResponse {
    return new QueryParamsResponse().fromBinary(bytes, options)
  }

  static fromJson(
    jsonValue: JsonValue,
    options?: Partial<JsonReadOptions>,
  ): QueryParamsResponse {
    return new QueryParamsResponse().fromJson(jsonValue, options)
  }

  static fromJsonString(
    jsonString: string,
    options?: Partial<JsonReadOptions>,
  ): QueryParamsResponse {
    return new QueryParamsResponse().fromJsonString(jsonString, options)
  }

  static equals(
    a: QueryParamsResponse | PlainMessage<QueryParamsResponse> | undefined,
    b: QueryParamsResponse | PlainMessage<QueryParamsResponse> | undefined,
  ): boolean {
    return proto3.util.equals(QueryParamsResponse, a, b)
  }
}

/**
 * QueryModuleAccountBalances is the request type for the balance of the
 * x/stablecoin module account.
 *
 * @generated from message nibiru.stablecoin.v1.QueryModuleAccountBalances
 */
export class QueryModuleAccountBalances extends Message<QueryModuleAccountBalances> {
  constructor(data?: PartialMessage<QueryModuleAccountBalances>) {
    super()
    proto3.util.initPartial(data, this)
  }

  static readonly runtime: typeof proto3 = proto3
  static readonly typeName = "nibiru.stablecoin.v1.QueryModuleAccountBalances"
  static readonly fields: FieldList = proto3.util.newFieldList(() => [])

  static fromBinary(
    bytes: Uint8Array,
    options?: Partial<BinaryReadOptions>,
  ): QueryModuleAccountBalances {
    return new QueryModuleAccountBalances().fromBinary(bytes, options)
  }

  static fromJson(
    jsonValue: JsonValue,
    options?: Partial<JsonReadOptions>,
  ): QueryModuleAccountBalances {
    return new QueryModuleAccountBalances().fromJson(jsonValue, options)
  }

  static fromJsonString(
    jsonString: string,
    options?: Partial<JsonReadOptions>,
  ): QueryModuleAccountBalances {
    return new QueryModuleAccountBalances().fromJsonString(jsonString, options)
  }

  static equals(
    a:
      | QueryModuleAccountBalances
      | PlainMessage<QueryModuleAccountBalances>
      | undefined,
    b:
      | QueryModuleAccountBalances
      | PlainMessage<QueryModuleAccountBalances>
      | undefined,
  ): boolean {
    return proto3.util.equals(QueryModuleAccountBalances, a, b)
  }
}

/**
 * @generated from message nibiru.stablecoin.v1.QueryModuleAccountBalancesResponse
 */
export class QueryModuleAccountBalancesResponse extends Message<QueryModuleAccountBalancesResponse> {
  /**
   * ModuleAccountBalances is the balance of all coins in the x/stablecoin
   * module.
   *
   * @generated from field: repeated cosmos.base.v1beta1.Coin module_account_balances = 1;
   */
  moduleAccountBalances: Coin[] = []

  constructor(data?: PartialMessage<QueryModuleAccountBalancesResponse>) {
    super()
    proto3.util.initPartial(data, this)
  }

  static readonly runtime: typeof proto3 = proto3
  static readonly typeName = "nibiru.stablecoin.v1.QueryModuleAccountBalancesResponse"
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    {
      no: 1,
      name: "module_account_balances",
      kind: "message",
      T: Coin,
      repeated: true,
    },
  ])

  static fromBinary(
    bytes: Uint8Array,
    options?: Partial<BinaryReadOptions>,
  ): QueryModuleAccountBalancesResponse {
    return new QueryModuleAccountBalancesResponse().fromBinary(bytes, options)
  }

  static fromJson(
    jsonValue: JsonValue,
    options?: Partial<JsonReadOptions>,
  ): QueryModuleAccountBalancesResponse {
    return new QueryModuleAccountBalancesResponse().fromJson(jsonValue, options)
  }

  static fromJsonString(
    jsonString: string,
    options?: Partial<JsonReadOptions>,
  ): QueryModuleAccountBalancesResponse {
    return new QueryModuleAccountBalancesResponse().fromJsonString(jsonString, options)
  }

  static equals(
    a:
      | QueryModuleAccountBalancesResponse
      | PlainMessage<QueryModuleAccountBalancesResponse>
      | undefined,
    b:
      | QueryModuleAccountBalancesResponse
      | PlainMessage<QueryModuleAccountBalancesResponse>
      | undefined,
  ): boolean {
    return proto3.util.equals(QueryModuleAccountBalancesResponse, a, b)
  }
}

/**
 * QueryCirculatingSupplies is the request type for the circulating supply of
 * both NIBI and NUSD.
 *
 * @generated from message nibiru.stablecoin.v1.QueryCirculatingSupplies
 */
export class QueryCirculatingSupplies extends Message<QueryCirculatingSupplies> {
  constructor(data?: PartialMessage<QueryCirculatingSupplies>) {
    super()
    proto3.util.initPartial(data, this)
  }

  static readonly runtime: typeof proto3 = proto3
  static readonly typeName = "nibiru.stablecoin.v1.QueryCirculatingSupplies"
  static readonly fields: FieldList = proto3.util.newFieldList(() => [])

  static fromBinary(
    bytes: Uint8Array,
    options?: Partial<BinaryReadOptions>,
  ): QueryCirculatingSupplies {
    return new QueryCirculatingSupplies().fromBinary(bytes, options)
  }

  static fromJson(
    jsonValue: JsonValue,
    options?: Partial<JsonReadOptions>,
  ): QueryCirculatingSupplies {
    return new QueryCirculatingSupplies().fromJson(jsonValue, options)
  }

  static fromJsonString(
    jsonString: string,
    options?: Partial<JsonReadOptions>,
  ): QueryCirculatingSupplies {
    return new QueryCirculatingSupplies().fromJsonString(jsonString, options)
  }

  static equals(
    a: QueryCirculatingSupplies | PlainMessage<QueryCirculatingSupplies> | undefined,
    b: QueryCirculatingSupplies | PlainMessage<QueryCirculatingSupplies> | undefined,
  ): boolean {
    return proto3.util.equals(QueryCirculatingSupplies, a, b)
  }
}

/**
 * @generated from message nibiru.stablecoin.v1.QueryCirculatingSuppliesResponse
 */
export class QueryCirculatingSuppliesResponse extends Message<QueryCirculatingSuppliesResponse> {
  /**
   * @generated from field: cosmos.base.v1beta1.Coin nibi = 1;
   */
  nibi?: Coin

  /**
   * @generated from field: cosmos.base.v1beta1.Coin nusd = 2;
   */
  nusd?: Coin

  constructor(data?: PartialMessage<QueryCirculatingSuppliesResponse>) {
    super()
    proto3.util.initPartial(data, this)
  }

  static readonly runtime: typeof proto3 = proto3
  static readonly typeName = "nibiru.stablecoin.v1.QueryCirculatingSuppliesResponse"
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "nibi", kind: "message", T: Coin },
    { no: 2, name: "nusd", kind: "message", T: Coin },
  ])

  static fromBinary(
    bytes: Uint8Array,
    options?: Partial<BinaryReadOptions>,
  ): QueryCirculatingSuppliesResponse {
    return new QueryCirculatingSuppliesResponse().fromBinary(bytes, options)
  }

  static fromJson(
    jsonValue: JsonValue,
    options?: Partial<JsonReadOptions>,
  ): QueryCirculatingSuppliesResponse {
    return new QueryCirculatingSuppliesResponse().fromJson(jsonValue, options)
  }

  static fromJsonString(
    jsonString: string,
    options?: Partial<JsonReadOptions>,
  ): QueryCirculatingSuppliesResponse {
    return new QueryCirculatingSuppliesResponse().fromJsonString(jsonString, options)
  }

  static equals(
    a:
      | QueryCirculatingSuppliesResponse
      | PlainMessage<QueryCirculatingSuppliesResponse>
      | undefined,
    b:
      | QueryCirculatingSuppliesResponse
      | PlainMessage<QueryCirculatingSuppliesResponse>
      | undefined,
  ): boolean {
    return proto3.util.equals(QueryCirculatingSuppliesResponse, a, b)
  }
}

/**
 * QueryGovToMintStable is the request type for the Query/GovToMintStable RPC
 * method
 *
 * @generated from message nibiru.stablecoin.v1.QueryGovToMintStable
 */
export class QueryGovToMintStable extends Message<QueryGovToMintStable> {
  /**
   * @generated from field: cosmos.base.v1beta1.Coin collateral = 1;
   */
  collateral?: Coin

  constructor(data?: PartialMessage<QueryGovToMintStable>) {
    super()
    proto3.util.initPartial(data, this)
  }

  static readonly runtime: typeof proto3 = proto3
  static readonly typeName = "nibiru.stablecoin.v1.QueryGovToMintStable"
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "collateral", kind: "message", T: Coin },
  ])

  static fromBinary(
    bytes: Uint8Array,
    options?: Partial<BinaryReadOptions>,
  ): QueryGovToMintStable {
    return new QueryGovToMintStable().fromBinary(bytes, options)
  }

  static fromJson(
    jsonValue: JsonValue,
    options?: Partial<JsonReadOptions>,
  ): QueryGovToMintStable {
    return new QueryGovToMintStable().fromJson(jsonValue, options)
  }

  static fromJsonString(
    jsonString: string,
    options?: Partial<JsonReadOptions>,
  ): QueryGovToMintStable {
    return new QueryGovToMintStable().fromJsonString(jsonString, options)
  }

  static equals(
    a: QueryGovToMintStable | PlainMessage<QueryGovToMintStable> | undefined,
    b: QueryGovToMintStable | PlainMessage<QueryGovToMintStable> | undefined,
  ): boolean {
    return proto3.util.equals(QueryGovToMintStable, a, b)
  }
}

/**
 * QueryGovToMintStableResponse is the response type for 'QueryGovToMintStable'
 *
 * @generated from message nibiru.stablecoin.v1.QueryGovToMintStableResponse
 */
export class QueryGovToMintStableResponse extends Message<QueryGovToMintStableResponse> {
  /**
   * @generated from field: cosmos.base.v1beta1.Coin gov = 1;
   */
  gov?: Coin

  constructor(data?: PartialMessage<QueryGovToMintStableResponse>) {
    super()
    proto3.util.initPartial(data, this)
  }

  static readonly runtime: typeof proto3 = proto3
  static readonly typeName = "nibiru.stablecoin.v1.QueryGovToMintStableResponse"
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "gov", kind: "message", T: Coin },
  ])

  static fromBinary(
    bytes: Uint8Array,
    options?: Partial<BinaryReadOptions>,
  ): QueryGovToMintStableResponse {
    return new QueryGovToMintStableResponse().fromBinary(bytes, options)
  }

  static fromJson(
    jsonValue: JsonValue,
    options?: Partial<JsonReadOptions>,
  ): QueryGovToMintStableResponse {
    return new QueryGovToMintStableResponse().fromJson(jsonValue, options)
  }

  static fromJsonString(
    jsonString: string,
    options?: Partial<JsonReadOptions>,
  ): QueryGovToMintStableResponse {
    return new QueryGovToMintStableResponse().fromJsonString(jsonString, options)
  }

  static equals(
    a:
      | QueryGovToMintStableResponse
      | PlainMessage<QueryGovToMintStableResponse>
      | undefined,
    b:
      | QueryGovToMintStableResponse
      | PlainMessage<QueryGovToMintStableResponse>
      | undefined,
  ): boolean {
    return proto3.util.equals(QueryGovToMintStableResponse, a, b)
  }
}

/**
 * @generated from message nibiru.stablecoin.v1.LiquidityRatioInfo
 */
export class LiquidityRatioInfo extends Message<LiquidityRatioInfo> {
  /**
   * @generated from field: string liquidity_ratio = 1;
   */
  liquidityRatio = ""

  /**
   * @generated from field: string upper_band = 2;
   */
  upperBand = ""

  /**
   * @generated from field: string lower_band = 3;
   */
  lowerBand = ""

  constructor(data?: PartialMessage<LiquidityRatioInfo>) {
    super()
    proto3.util.initPartial(data, this)
  }

  static readonly runtime: typeof proto3 = proto3
  static readonly typeName = "nibiru.stablecoin.v1.LiquidityRatioInfo"
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "liquidity_ratio", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 2, name: "upper_band", kind: "scalar", T: 9 /* ScalarType.STRING */ },
    { no: 3, name: "lower_band", kind: "scalar", T: 9 /* ScalarType.STRING */ },
  ])

  static fromBinary(
    bytes: Uint8Array,
    options?: Partial<BinaryReadOptions>,
  ): LiquidityRatioInfo {
    return new LiquidityRatioInfo().fromBinary(bytes, options)
  }

  static fromJson(
    jsonValue: JsonValue,
    options?: Partial<JsonReadOptions>,
  ): LiquidityRatioInfo {
    return new LiquidityRatioInfo().fromJson(jsonValue, options)
  }

  static fromJsonString(
    jsonString: string,
    options?: Partial<JsonReadOptions>,
  ): LiquidityRatioInfo {
    return new LiquidityRatioInfo().fromJsonString(jsonString, options)
  }

  static equals(
    a: LiquidityRatioInfo | PlainMessage<LiquidityRatioInfo> | undefined,
    b: LiquidityRatioInfo | PlainMessage<LiquidityRatioInfo> | undefined,
  ): boolean {
    return proto3.util.equals(LiquidityRatioInfo, a, b)
  }
}

/**
 * @generated from message nibiru.stablecoin.v1.QueryLiquidityRatioInfoRequest
 */
export class QueryLiquidityRatioInfoRequest extends Message<QueryLiquidityRatioInfoRequest> {
  constructor(data?: PartialMessage<QueryLiquidityRatioInfoRequest>) {
    super()
    proto3.util.initPartial(data, this)
  }

  static readonly runtime: typeof proto3 = proto3
  static readonly typeName = "nibiru.stablecoin.v1.QueryLiquidityRatioInfoRequest"
  static readonly fields: FieldList = proto3.util.newFieldList(() => [])

  static fromBinary(
    bytes: Uint8Array,
    options?: Partial<BinaryReadOptions>,
  ): QueryLiquidityRatioInfoRequest {
    return new QueryLiquidityRatioInfoRequest().fromBinary(bytes, options)
  }

  static fromJson(
    jsonValue: JsonValue,
    options?: Partial<JsonReadOptions>,
  ): QueryLiquidityRatioInfoRequest {
    return new QueryLiquidityRatioInfoRequest().fromJson(jsonValue, options)
  }

  static fromJsonString(
    jsonString: string,
    options?: Partial<JsonReadOptions>,
  ): QueryLiquidityRatioInfoRequest {
    return new QueryLiquidityRatioInfoRequest().fromJsonString(jsonString, options)
  }

  static equals(
    a:
      | QueryLiquidityRatioInfoRequest
      | PlainMessage<QueryLiquidityRatioInfoRequest>
      | undefined,
    b:
      | QueryLiquidityRatioInfoRequest
      | PlainMessage<QueryLiquidityRatioInfoRequest>
      | undefined,
  ): boolean {
    return proto3.util.equals(QueryLiquidityRatioInfoRequest, a, b)
  }
}

/**
 * @generated from message nibiru.stablecoin.v1.QueryLiquidityRatioInfoResponse
 */
export class QueryLiquidityRatioInfoResponse extends Message<QueryLiquidityRatioInfoResponse> {
  /**
   * @generated from field: nibiru.stablecoin.v1.LiquidityRatioInfo info = 1;
   */
  info?: LiquidityRatioInfo

  constructor(data?: PartialMessage<QueryLiquidityRatioInfoResponse>) {
    super()
    proto3.util.initPartial(data, this)
  }

  static readonly runtime: typeof proto3 = proto3
  static readonly typeName = "nibiru.stablecoin.v1.QueryLiquidityRatioInfoResponse"
  static readonly fields: FieldList = proto3.util.newFieldList(() => [
    { no: 1, name: "info", kind: "message", T: LiquidityRatioInfo },
  ])

  static fromBinary(
    bytes: Uint8Array,
    options?: Partial<BinaryReadOptions>,
  ): QueryLiquidityRatioInfoResponse {
    return new QueryLiquidityRatioInfoResponse().fromBinary(bytes, options)
  }

  static fromJson(
    jsonValue: JsonValue,
    options?: Partial<JsonReadOptions>,
  ): QueryLiquidityRatioInfoResponse {
    return new QueryLiquidityRatioInfoResponse().fromJson(jsonValue, options)
  }

  static fromJsonString(
    jsonString: string,
    options?: Partial<JsonReadOptions>,
  ): QueryLiquidityRatioInfoResponse {
    return new QueryLiquidityRatioInfoResponse().fromJsonString(jsonString, options)
  }

  static equals(
    a:
      | QueryLiquidityRatioInfoResponse
      | PlainMessage<QueryLiquidityRatioInfoResponse>
      | undefined,
    b:
      | QueryLiquidityRatioInfoResponse
      | PlainMessage<QueryLiquidityRatioInfoResponse>
      | undefined,
  ): boolean {
    return proto3.util.equals(QueryLiquidityRatioInfoResponse, a, b)
  }
}
